---
- name: Verify Kibana Deployment
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    elastic_namespace: "elastic"
    control_plane_ip: "{{ hostvars[groups['k3s_control_plane'][0]]['ansible_host'] }}"

  tasks:
    - name: Verify Kibana CR exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o name
      register: kibana_cr_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check Kibana health
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o jsonpath='{.status.health}'
      register: kibana_health
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check Kibana association status
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o jsonpath='{.status.associationStatus}'
      register: kibana_association
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana pods are running
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | sort | uniq -c
      register: kibana_pods
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana pod details
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o json
      register: kibana_pod_details
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check Kibana pod readiness
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o jsonpath='{.items[0].status.containerStatuses[0].ready}'
      register: kibana_readiness
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Get Kibana version
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o jsonpath='{.spec.version}'
      register: kibana_version
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana NodePort service
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get svc kibana-kb-nodeport -o jsonpath='{.spec.ports[0].nodePort}'
      register: kibana_nodeport
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check if Kibana is accessible via internal DNS (within cluster)
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} run curl-test --image=curlimages/curl:7.83.1 --rm -i --restart=Never -- curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 5 https://kibana-kb-http:5601/kibana/api/status
      register: kibana_internal_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check if Kibana is accessible via NodePort (from outside)
      shell: |
        curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 5 https://{{ control_plane_ip }}:{{ kibana_nodeport.stdout }}/kibana/
      register: kibana_nodeport_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false
      when: kibana_nodeport.rc == 0

    - name: Check if Kibana config includes basePath
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o yaml | grep -i "basePath\\|publicBaseUrl" || echo "basePath not configured"
      register: kibana_basepath
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check Kibana logs for errors
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} logs -l kibana.k8s.elastic.co/name=kibana --tail=20 | grep -i error || echo "No errors found in recent logs"
      register: kibana_logs
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana service
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get service kibana-kb-http -o jsonpath='{.spec.ports[0].port}'
      register: kibana_service_port
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Get detailed pod status
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,READY:.status.containerStatuses[0].ready,RESTARTS:.status.containerStatuses[0].restartCount
      register: kibana_pod_status
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check if pod port is actually listening (using kubectl exec)
      shell: |
        POD_NAME=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o jsonpath='{.items[0].metadata.name}')
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} exec $POD_NAME -- netstat -tulpn | grep 5601 || echo "Port not found"
      register: kibana_port_check
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Get Kibana pod IP
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o jsonpath='{.items[0].status.podIP}'
      register: kibana_pod_ip
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify NodePort is actually listening on control plane
      shell: |
        ssh {{ hostvars[groups['k3s_control_plane'][0]].ansible_user }}@{{ control_plane_ip }} 'sudo netstat -tulpn | grep 30056 || echo "NodePort not found on host"'
      register: nodeport_listening
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Check various connectivity options
      shell: |
        # Try direct pod IP first (from utility server)
        echo "Testing connection to pod IP..."
        curl -k -s -o /dev/null -w "Pod IP: %{http_code}\n" --connect-timeout 3 https://{{ kibana_pod_ip.stdout }}:5601/kibana/api/status || echo "Failed to connect to pod IP"
        
        # Try from control plane node itself
        echo "Testing from control plane node..."
        ssh {{ hostvars[groups['k3s_control_plane'][0]].ansible_user }}@{{ control_plane_ip }} 'curl -k -s -o /dev/null -w "Control plane local: %{http_code}\n" --connect-timeout 3 https://localhost:30056/kibana/api/status' || echo "Failed to connect from control plane"
        
        # Try the cluster IP service
        echo "Testing service ClusterIP..."
        CLUSTER_IP=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get service kibana-kb-http -o jsonpath='{.spec.clusterIP}')
        curl -k -s -o /dev/null -w "Cluster IP: %{http_code}\n" --connect-timeout 3 https://$CLUSTER_IP:5601/kibana/api/status || echo "Failed to connect to Cluster IP"
      register: connectivity_tests
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Get Kibana logs (more extensive)
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} logs -l kibana.k8s.elastic.co/name=kibana --tail=50 | grep -i "listening|error|warn" || echo "No matching log entries found"
      register: kibana_detailed_logs
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Display Kibana verification results
      debug:
        msg:
          - "Kibana Verification Results:"
          - "--------------------------------------"
          - "Kibana CR exists: {{ 'Yes' if kibana_cr_exists.rc == 0 else 'No' }}"
          - "Kibana health: {{ kibana_health.stdout if kibana_health.rc == 0 else 'Unknown' }}"
          - "Elasticsearch association: {{ kibana_association.stdout if kibana_association.rc == 0 else 'Unknown' }}"
          - "Kibana pods status: {{ kibana_pods.stdout if kibana_pods.rc == 0 else 'No pods found' }}"
          - "Kibana container ready: {{ kibana_readiness.stdout if kibana_readiness.rc == 0 else 'Unknown' }}"
          - "Kibana version: {{ kibana_version.stdout if kibana_version.rc == 0 else 'Unknown' }}"
          - "NodePort: {{ kibana_nodeport.stdout if kibana_nodeport.rc == 0 else 'Not configured' }}"
          - "Internal access check: {{ kibana_internal_access.stdout if kibana_internal_access.rc == 0 else 'Failed' }}"
          - "External NodePort access: {{ kibana_nodeport_access.stdout if kibana_nodeport_access is defined and kibana_nodeport_access.rc == 0 else 'Not tested' }}"
          - "BasePath configuration: {{ kibana_basepath.stdout_lines | default(['Unknown']) }}"
          - "Recent log entries: {{ kibana_logs.stdout_lines | default(['Could not retrieve logs']) }}"
          - "--------------------------------------"
          - "Overall status: {{ 'HEALTHY' if kibana_cr_exists.rc == 0 and kibana_association.stdout == 'Established' and 'Running' in kibana_pods.stdout else 'ISSUES DETECTED' }}"

    - name: Display Kibana diagnostics
      debug:
        msg:
          - "Kibana Diagnostics:"
          - "--------------------------------------"
          - "Pod Status Details:"
          - "{{ kibana_pod_status.stdout_lines }}"
          - ""
          - "Service Port: {{ kibana_service_port.stdout if kibana_service_port.rc == 0 else 'Not found' }}"
          - "Pod IP: {{ kibana_pod_ip.stdout if kibana_pod_ip.rc == 0 else 'Not found' }}"
          - ""
          - "Port Listening Check (on pod):"
          - "{{ kibana_port_check.stdout_lines }}"
          - ""
          - "NodePort Listening Check (on host):"
          - "{{ nodeport_listening.stdout_lines }}"
          - ""
          - "Connectivity Tests:"
          - "{{ connectivity_tests.stdout_lines }}"
          - ""
          - "Recent Kibana Logs:"
          - "{{ kibana_detailed_logs.stdout_lines }}"
          - "--------------------------------------"

    - name: Get detailed pod status
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} describe pod -l kibana.k8s.elastic.co/name=kibana | grep -A5 "Conditions:" || echo "No detailed conditions found"
      register: pod_conditions
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Show pod conditions
      debug:
        msg: "{{ pod_conditions.stdout_lines }}"

    - name: Get pod events
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get events --field-selector involvedObject.kind=Pod,involvedObject.name=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get pods -l kibana.k8s.elastic.co/name=kibana -o jsonpath='{.items[0].metadata.name}') --sort-by='.lastTimestamp' | tail -5
      register: pod_events
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Show recent pod events
      debug:
        msg: "{{ pod_events.stdout_lines }}"

    - name: Set verification status with more data-driven criteria
      set_fact:
        kibana_healthy: >-
          {{
            kibana_cr_exists.rc == 0 and
            kibana_association.stdout == 'Established' and
            'Running' in kibana_pods.stdout and
            'not found' not in kibana_port_check.stdout | lower
          }}

    - name: Display final verification status
      debug:
        msg: >-
          Kibana appears to be {{ 'HEALTHY' if kibana_healthy else 'UNHEALTHY' }}.
          Pod is running: {{ 'Yes' if 'Running' in kibana_pods.stdout else 'No' }}
          Association status: {{ kibana_association.stdout if kibana_association.rc == 0 else 'Unknown' }}
          Health status: {{ kibana_health.stdout if kibana_health.rc == 0 else 'Unknown' }}
          Port 5601 listening: {{ 'Yes' if 'not found' not in kibana_port_check.stdout | lower else 'No' }}

    - name: Fail if Kibana is not healthy (with override option)
      fail:
        msg: "Kibana verification failed. See output above for details."
      when: not kibana_healthy and (force_fail | default(true))