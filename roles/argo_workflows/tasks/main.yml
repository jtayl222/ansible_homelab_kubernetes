# 1. Check prerequisites
- name: Ensure kubeconfig exists
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig_stat

- name: Fail if kubeconfig doesn't exist
  ansible.builtin.fail:
    msg:
      Kubeconfig not found at {{ kubeconfig_path }}. Please run install_020_k3s_control_plane.yml
      first.
  when:
    not kubeconfig_stat.stat.exists

# 2. Check for previous installation
- name: Check if Argo Workflows is already installed
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} \
      get namespace {{ argowf_namespace }} -o name 2>/dev/null || echo "not found"
  register: argowf_namespace_check
  become: false
  changed_when: false

- name: Display Argo Workflows installation status
  ansible.builtin.debug:
    msg:
      "Argo Workflows namespace: {{ 'Already exists' if 'not found' not in argowf_namespace_check.stdout
      else 'Will be created' }}"

# 3. Create namespace if needed
- name: Create Argo Workflows namespace if it doesn't exist
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ argowf_namespace }}"
  become: false
  when:
    "'not found' in argowf_namespace_check.stdout"

# 4. Create PVC for Argo Workflows artifacts
- name: Create PVC for Argo Workflows artifacts
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ argowf_artifacts_pvc }}"
        namespace: "{{ argowf_namespace }}"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ argowf_artifacts_size }}"
        storageClassName: nfs-client
  become:
    false

# 5. Create ConfigMap for artifact repository configuration
- name: Create ConfigMap for artifact repository configuration
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: artifact-repositories
        namespace: "{{ argowf_namespace }}"
      data:
        default-v1: |
          archiveLogs: true
          s3:
            bucket: my-bucket
            endpoint: minio.minio:9000
            insecure: true
            accessKeySecret:
              name: my-minio-cred
              key: accesskey
            secretKeySecret:
              name: my-minio-cred
              key: secretkey
  become:
    false

# 6. Create workflow controller ConfigMap
- name: Create workflow controller ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: workflow-controller-configmap
        namespace: "{{ argowf_namespace }}"
      data:
        config: |
          executor:
            resources:
              requests:
                cpu: 100m
                memory: 64Mi
              limits:
                cpu: 500m
                memory: 512Mi
          workflowDefaults:
            spec:
              serviceAccountName: default
              ttlStrategy:
                secondsAfterCompletion: 3600
                secondsAfterSuccess: 3600
                secondsAfterFailure: 7200
  become:
    false

# 7. Install Argo Workflows from official manifests
- name: Install Argo Workflows manifests
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} apply -n {{ argowf_namespace }} -f {{ argowf_install_manifest }}
  register: install_result
  become: false
  changed_when: "'created' in install_result.stdout or 'configured' in install_result.stdout"

- name: Display installation results
  ansible.builtin.debug:
    msg: "{{ install_result.stdout_lines }}"
  when:
    install_result.stdout | length > 0

# 8. Wait for Argo Workflows CRDs to be established
- name: Wait for Argo Workflows CRDs to be established
  ansible.builtin.shell: |
    for i in {1..15}; do
      if kubectl --kubeconfig={{ kubeconfig_path }} \
          get crd workflows.argoproj.io >/dev/null 2>&1 && \
          kubectl --kubeconfig={{ kubeconfig_path }} \
          get crd workflowtemplates.argoproj.io >/dev/null 2>&1; then
        echo "CRDs are ready"
        exit 0
      fi
      echo "Waiting for CRDs to be established... attempt $i"
      sleep 10
    done
    echo "CRDs not ready after timeout"
    exit 1
  register: crd_check
  become: false
  changed_when: false
  ignore_errors:
    true

# 9. Set up RBAC for the default service account
- name: Create RBAC for default service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: workflow-role
        namespace: "{{ argowf_namespace }}"
      rules:
        - apiGroups: [argoproj.io]
          resources:
            [
              workflows,
              workflowtemplates,
              cronworkflows,
              workflowtaskresults,
            ]
          verbs: [create, get, list, watch, update, patch, delete]
  register: role_result
  become: false
  ignore_errors: true

- name: Bind Role to default service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: workflow-role-binding
        namespace: "{{ argowf_namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: workflow-role
      subjects:
        - kind: ServiceAccount
          name: default
          namespace: "{{ argowf_namespace }}"
  register: rolebinding_result
  become: false
  ignore_errors:
    true

# 10. Create admin service account for UI access
- name: Create admin service account for Argo Workflows UI access
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: argowf-admin
        namespace: "{{ argowf_namespace }}"
  register: admin_sa_result
  become: false
  ignore_errors: true

- name: Create admin ClusterRole for Argo Workflows UI access
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: argowf-server-admin-role
      rules:
        - apiGroups:
            - "*"
          resources:
            - "*"
          verbs:
            - "*"
        - nonResourceURLs:
            - "*"
          verbs:
            - "*"
  register: admin_role_result
  become: false
  ignore_errors: true

- name: Create ClusterRoleBinding for admin service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: argowf-server-admin-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: argowf-server-admin-role
      subjects:
        - kind: ServiceAccount
          name: argowf-admin
          namespace: "{{ argowf_namespace }}"
  register: admin_binding_result
  become: false
  ignore_errors: true

- name: Create token for admin service account (K8s v1.24+)
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: argowf-admin-token
        namespace: "{{ argowf_namespace }}"
        annotations:
          kubernetes.io/service-account.name: argowf-admin
      type: kubernetes.io/service-account-token
  register: token_secret
  become: false
  ignore_errors:
    true

# 11. Configure the Argo Workflows Server with correct flags and variables
- name: Configure Argo Workflows Server with correct flags and variables
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: argowf-server
        namespace: "{{ argowf_namespace }}"
      spec:
        template:
          spec:
            containers:
              - name: argowf-server
                args:
                  - server
                  - --auth-mode=server
                  - --access-control-allow-origin=*
                  - --base-href=/
                readinessProbe:
                  httpGet:
                    path: /
                    port: 2746
                    scheme: HTTPS
                livenessProbe:
                  httpGet:
                    path: /
                    port: 2746
                    scheme: HTTPS
  register: server_config_result
  become: false
  ignore_errors:
    true

# 12. Create NodePort service for direct access
- name: Create NodePort service for Argo Workflows UI
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: argowf-server-nodeport
        namespace: "{{ argowf_namespace }}"
      spec:
        type: NodePort
        ports:
          - port: 2746
            targetPort: 2746
            nodePort: "{{ argowf_nodeport }}"
            protocol: TCP
            name: https
        selector:
          app: argowf-server
  become:
    false

# 13. Create Traefik IngressRoute
- name: Create Traefik IngressRoute for Argo Workflows UI with CORS
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: argowf-ingress
        namespace: "{{ argowf_namespace }}"
        annotations:
          traefik.ingress.kubernetes.io/custom-response-headers: >-
            Access-Control-Allow-Origin: *||
            Access-Control-Allow-Methods: GET,POST,OPTIONS||
            Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,
            If-Modified-Since,Cache-Control,Content-Type,Authorization
      spec:
        entryPoints:
          - websecure
        routes:
          - match: Host(`{{ argowf_host }}`) || Host(`argowf.local`)
            kind: Rule
            services:
              - name: argowf-server
                port: 2746
                scheme: https
                serversTransport: insecure-transport
        tls: {}
  become: false

- name: Create ServersTransport for insecure TLS
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: ServersTransport
      metadata:
        name: insecure-transport
        namespace: "{{ argowf_namespace }}"
      spec:
        insecureSkipVerify: true
  become: false

- name: Create redirect middleware for HTTPS
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: redirect-to-https
        namespace: "{{ argowf_namespace }}"
      spec:
        redirectScheme:
          scheme: https
          permanent: true
  become:
    false

# Add this diagnostic task before the restart
- name: Check for Argo Workflows Server network policies
  ansible.builtin.shell: |
    echo "Checking for NetworkPolicies..."
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
      get networkpolicy -o name || echo "No NetworkPolicies found"

    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
      get endpoints argowf-server

    echo "Checking if server is accessible internally..."
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} run -i --rm --restart=Never curl-test --image=curlimages/curl:7.82.0 -- \
      curl -s -k https://argowf-server:2746/ -o /dev/null -w "%{http_code}\n" || echo "Internal connection test failed"
  register: network_diagnostics
  become: false
  changed_when: false
  ignore_errors:
    true

# 14. Clean restart with enhanced diagnostics
- name: Clean restart Argo Workflows components with enhanced diagnostics
  block:
    - name: Scale down deployments
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
          scale deployment --all --replicas=0
      register: scale_down
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      changed_when: scale_down.rc == 0 # This does change state when successful
      ignore_errors: true

    - name: Wait for pods to terminate
      ansible.builtin.shell: |
        set -o pipefail  # Add this line
        echo "Waiting for pods to terminate..."
        for i in $(seq 1 15); do
          if [ $(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
            get pods | grep -v "NAME" | wc -l) -eq 0 ]; then
            echo "All pods terminated"
            exit 0
          fi
          echo "Attempt $i: Pods still terminating..."
          kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods
          sleep 5
        done
        echo "WARNING: Not all pods terminated after timeout"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods
      args:
        executable: /bin/bash # Add this line
      register: termination_wait
      become: false
      changed_when: false

    - name: Check for remaining pods and force delete if necessary
      ansible.builtin.shell: |
        set -o pipefail  # Add this line
        PODS=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods -o name)
        if [ -n "$PODS" ]; then
          echo "Force deleting remaining pods: $PODS"
          echo "$PODS" | xargs kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} delete --force --grace-period=0
          sleep 5
        else
          echo "No pods remaining"
        fi
      args:
        executable: /bin/bash # Add this line
      register: force_delete
      become: false
      changed_when: "'Force deleting' in force_delete.stdout"

    - name: Apply resource limits to Argo Workflows deployments
      ansible.builtin.shell: |
        # Patch workflow-controller with resource limits
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} patch deployment workflow-controller --type='json' -p='[
          {"op": "add", "path": "/spec/template/spec/containers/0/resources", "value": {
            "requests": {"memory": "128Mi", "cpu": "100m"},
            "limits": {"memory": "256Mi", "cpu": "200m"}
          }}
        ]'

        # Patch argowf-server with resource limits
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} patch deployment argowf-server --type='json' -p='[
          {"op": "add", "path": "/spec/template/spec/containers/0/resources", "value": {
            "requests": {"memory": "128Mi", "cpu": "100m"},
            "limits": {"memory": "256Mi", "cpu": "200m"}
          }}
        ]'
        echo "Applied resource limits to deployments"
      register: patch_resources
      become: false
      changed_when: true
      ignore_errors: true

    - name: Scale up deployments one at a time
      ansible.builtin.shell: |
        echo "Scaling up workflow-controller first..."
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} scale deployment workflow-controller --replicas=1
        sleep 10
        echo "Scaling up argowf-server..."
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} scale deployment argowf-server --replicas=1
      register: scale_up
      become: false
      changed_when: scale_up.rc == 0 # Add this line to indicate when it changes state
  rescue:
    - name: Display error message for restart failures
      ansible.builtin.debug:
        msg:
          Failed to properly restart Argo Workflows components. See error messages
          above for details.

# 15. Enhanced deployment status checking with pod diagnostics
- name: Wait for workflow controller with debugging
  ansible.builtin.shell: |
    echo "Checking workflow-controller status..."
    for i in $(seq 1 30); do
      STATUS=$(kubectl --kubeconfig={{ kubeconfig_path }} \
        -n {{ argowf_namespace }} \
        get deployment workflow-controller \
        -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
      READY=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
        get deployment workflow-controller -o jsonpath='{.status.readyReplicas}')

      if [ "$STATUS" = "True" ] && [ "$READY" = "1" ]; then
        echo "workflow-controller deployment is ready"
        exit 0
      fi

      echo "Attempt $i: workflow-controller not ready yet. Status: $STATUS, Ready: $READY"
      echo "Pod details:"
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
        get pods -l app=workflow-controller -o wide

      if [ "$i" = "10" ] || [ "$i" = "20" ]; then
        echo "Checking pod events:"
        POD=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
          get pods -l app=workflow-controller -o name | head -1)
        if [ -n "$POD" ]; then
          kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} describe $POD | grep -A 10 "Events:"
          echo "Checking pod logs:"
          kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} logs $POD --tail=20 || echo "Unable to get logs"
        fi
      fi

      sleep 10
    done

    echo "ERROR: Timed out waiting for workflow-controller deployment"
    POD=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} \
      get pods -l app=workflow-controller -o name | head -1)
    if [ -n "$POD" ]; then
      echo "Final pod status:"
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} describe $POD
    fi
    exit 1
  args:
    executable: /bin/bash
  register: controller_status
  become: false
  changed_when: false
  ignore_errors: true

- name: Wait for argowf-server with debugging
  ansible.builtin.shell: |
    echo "Checking argowf-server status..."
    for i in $(seq 1 30); do
      STATUS=$(kubectl --kubeconfig={{ kubeconfig_path }} \
        -n {{ argowf_namespace }} \
        get deployment argowf-server \
        -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
      READY=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get deployment argowf-server -o jsonpath='{.status.readyReplicas}')

      if [ "$STATUS" = "True" ] && [ "$READY" = "1" ]; then
        echo "argowf-server deployment is ready"
        exit 0
      fi

      echo "Attempt $i: argowf-server not ready yet. Status: $STATUS, Ready: $READY"
      echo "Pod details:"
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods -l app=argowf-server -o wide

      if [ "$i" = "10" ] || [ "$i" = "20" ]; then
        echo "Checking pod events:"
        POD=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods -l app=argowf-server -o name | head -1)
        if [ -n "$POD" ]; then
          kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} describe $POD | grep -A 10 "Events:"
          echo "Checking pod logs:"
          kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} logs $POD --tail=20 || echo "Unable to get logs"
        fi
      fi

      sleep 10
    done

    echo "ERROR: Timed out waiting for argowf-server deployment"
    POD=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} get pods -l app=argowf-server -o name | head -1)
    if [ -n "$POD" ]; then
      echo "Final pod status:"
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} describe $POD
    fi
    exit 1
  args:
    executable: /bin/bash
  register: server_status
  become: false
  changed_when: false
  ignore_errors: true

- name: Check node resources
  ansible.builtin.shell: |
    echo "Checking node resources..."
    kubectl --kubeconfig={{ kubeconfig_path }} \
      get nodes -o custom-columns=NAME:.metadata.name,CPU:.status.capacity.cpu,MEMORY:.status.capacity.memory

    echo "Checking pods resources by node..."
    kubectl --kubeconfig={{ kubeconfig_path }} \
      get pods -A -o wide | grep -v "NAME"
  register: node_resources
  become: false
  changed_when: false
  ignore_errors: true

- name: Display deployment status summary
  ansible.builtin.debug:
    msg:
      - ==================== ARGO WORKFLOWS DEPLOYMENT STATUS ====================
      - "Workflow Controller: {{ 'READY' if controller_status.rc | default(1) == 0
        else 'NOT READY' }}"
      - "Argo Workflows Server: {{ 'READY' if server_status.rc | default(1) == 0 else
        'NOT READY' }}"
      - See complete logs for debugging information
      - ==============================================================

# 16. Create token generation script
- name: Create a local script to generate a valid token for Argo Workflows UI
  ansible.builtin.copy:
    dest: "{{ playbook_dir }}/../generated/get-argowf-token.sh"
    mode: "0755"
    content: |
      #!/bin/bash
      # Script to generate a token for accessing Argo Workflows UI in Kubernetes 1.24+

      NAMESPACE="argowf"
      SA_NAME="argowf-admin"

      # Check if the service account exists
      if ! kubectl -n $NAMESPACE \
        get serviceaccount $SA_NAME &>/dev/null; then
          echo "Service account $SA_NAME not found in namespace $NAMESPACE"
          exit 1
        fi

      # Create a token using kubectl
      echo "Creating token for service account $SA_NAME..."
      TOKEN=$(kubectl -n $NAMESPACE create token $SA_NAME)

      if [ -z "$TOKEN" ]; then
        echo "Failed to generate token for service account $SA_NAME"
        exit 1
      fi

      echo "===== ARGO WORKFLOWS UI TOKEN ====="
      echo "$TOKEN"
      echo "========================="
      echo "Copy this token and use it to log in to the Argo Workflows UI at:"
      echo "https://{{ control_plane_ip }}:{{ argowf_nodeport }}/"
      echo ""
      echo "NOTE: This token is short-lived and will expire."
      echo "Run this script again to generate a new token if needed."
  register: token_script
  become:
    false

# 17. Get the admin token for display in summary
- name: Wait for token to be populated
  ansible.builtin.pause:
    seconds: 5

- name: Get admin service account token
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} create token argowf-admin
  register: admin_token
  become: false
  changed_when: false
  ignore_errors:
    true

# 18. Create a basic workflow template example if CRDs are ready
- name: Create example workflow template using kubectl
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} apply -f - <<EOF
    apiVersion: argoproj.io/v1alpha1
    kind: WorkflowTemplate
    metadata:
      name: hello-world-template
    spec:
      entrypoint: main
      templates:
      - name: main
        container:
          image: alpine:3.14
          command: [sh, -c]
          args: ["echo 'Hello World'; sleep 5; echo 'Workflow completed'"]
          resources:
            limits:
              memory: 32Mi
              cpu: 100m
    EOF
  register: template_result
  become: false
  changed_when: "'created' in template_result.stdout or 'configured' in template_result.stdout"
  ignore_errors: true
  when:
    crd_check.rc == 0

# 19. Submit a test workflow using kubectl
- name: Submit test workflow using kubectl
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ argowf_namespace }} create -f - <<EOF
    apiVersion: argoproj.io/v1alpha1
    kind: Workflow
    metadata:
      generateName: hello-world-
    spec:
      entrypoint: say-hello
      templates:
      - name: say-hello
        container:
          image: alpine:3.14
          command: [echo]
          args: ["Hello from Argo Workflows!"]
    EOF
  register: test_workflow
  become: false
  changed_when: false
  ignore_errors: true
  when:
    crd_check.rc == 0

# 20. Test Argo Workflows UI access via NodePort
- name: Test Argo Workflows UI access via NodePort
  ansible.builtin.uri:
    url: https://{{ control_plane_ip }}:{{ argowf_nodeport }}/
    method: GET
    return_content: false
    status_code: [200, 301, 302, 401, 403] # Accept various common status codes as success
    validate_certs: false # Since we're using self-signed certificates
    timeout: 10
  register: argowf_ui_access
  become: false
  ignore_errors:
    true

# 21. Variables for Argo Workflows installation summary
- name: Set status variables for summary
  ansible.builtin.set_fact:
    argowf_server_status: >-
      {% if argowf_server_rollout is defined and argowf_server_rollout.rc is defined
      %}
      {{ 'Successfully deployed' if argowf_server_rollout.rc == 0 else 'Deployment
      had issues' }}
      {% else %}Status unknown{% endif %}
    argowf_controller_status: >-
      {% if argowf_controller_rollout is defined and argowf_controller_rollout.rc
      is
      defined %}
      {{ 'Successfully deployed' if argowf_controller_rollout.rc == 0 else 'Deployment
      had issues' }}
      {% else %}Status unknown{% endif %}
    auth_config_status: >-
      {% if server_config_result is defined %}
      {{ 'Yes' if server_config_result.changed | default(false) else 'No - may need
      manual configuration' }}
      {% else %}Status unknown{% endif %}
    template_status: >-
      {% if template_result is defined and template_result.rc is defined %}
      {{ 'Created' if template_result.rc == 0 else 'Failed - CRDs may not be ready
      yet' }}
      {% else %}Not created{% endif %}
    ui_access_status: >-
      {% if argowf_ui_access is defined and argowf_ui_access.stdout is defined %}
      {{ argowf_ui_access.stdout }}
      {% else %}Failed - see verification output{% endif %}
    test_workflow_status: >-
      {% if test_workflow is defined and test_workflow.rc is defined %}
      {{ 'Submitted successfully' if test_workflow.rc == 0 else 'Failed - see verification
      output' }}
      {% else %}Not submitted{% endif %}
    crd_status: >-
      {% if crd_check is defined and crd_check.rc is defined %}
      {{ 'Ready' if crd_check.rc == 0 else 'Not ready - allow more time' }}
      {% else %}Status unknown{% endif %}

- name: Display Argo Workflows installation summary
  ansible.builtin.debug:
    msg:
      - ==================== ARGO WORKFLOWS INSTALLATION SUMMARY ====================
      - Argo Workflows has been installed using the official manifests.
      - ""
      - "Access URLs:"
      - "- Argo Workflows UI via NodePort: https://{{ control_plane_ip }}:{{ argowf_nodeport
        }}/"
      - "- Argo Workflows UI via Ingress: https://{{ argowf_host }}/"
      - ""
      - "Authentication:"
      - "- To get a valid token for UI login, run: ./generated/get-argowf-token.sh"
      - "- Copy the generated token and paste it in the Argo Workflows UI login screen"
      - ""
      - "Components Deployed:"
      - "- Argo Workflows Server Status: {{ argowf_server_status }}"
      - "- Argo Workflows Controller Status: {{ argowf_controller_status }}"
      - "- Auth Config Applied: {{ auth_config_status }}"
      - "- Workflow Template Example: {{ template_status }}"
      - ""
      - "Storage Configuration:"
      - "- Artifacts PVC: {{ argowf_artifacts_pvc }} ({{ argowf_artifacts_size }})"
      - "- Storage Class: nfs-client"
      - ""
      - "Access Status:"
      - "- UI Access: {{ ui_access_status }}"
      - "- Test Workflow: {{ test_workflow_status }}"
      - "- CRD Status: {{ crd_status }}"
      - ""
      - "Next Steps:"
      - 1. Access the Argo Workflows UI to view and manage workflows
      - 2. Use the example template to create your own workflows
      - 3. For CLI usage, install the argowf CLI tool
      - ""
      - "Verify installation with: ansible-playbook -i inventory/hosts verify_130_argowf.yml"
      - ==================================================================
