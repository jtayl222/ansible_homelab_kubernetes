# Check prerequisites
- name: Ensure kubeconfig exists
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig_stat

- name: Fail if kubeconfig doesn't exist
  ansible.builtin.fail:
    msg:
      Kubeconfig not found at {{ kubeconfig_path }}. Please run install_020_k3s_control_plane.yml
      first.
  when: not kubeconfig_stat.stat.exists

  # Check if MLflow is already installed
- name: Check if MLflow is already deployed
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} \
      get namespace {{ mlflow_namespace }} \
      -o name 2>/dev/null || echo "not found"
  register: mlflow_ns_check
  become: false
  changed_when: false

- name: Display MLflow installation status
  ansible.builtin.debug:
    msg:
      "MLflow namespace: {{ 'Already exists' if 'not found' not in mlflow_ns_check.stdout
      else 'Will be created' }}"

  # Clean up any failed deployment first
- name: Check if previous failed deployment exists
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    get deployment mlflow -o name 2>/dev/null || echo "not found"
  register: mlflow_deployment_check
  become: false
  changed_when: false
  ignore_errors: true
  when: "'not found' not in mlflow_ns_check.stdout"

- name: Clean up previous failed deployment if exists
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    delete deployment mlflow 2>/dev/null || echo "not found"
  become: false
  changed_when: "'deleted' in result.stdout"
  register: result
  failed_when:
    - result.rc != 0
    - "'not found' not in result.stderr"
  when: >
    mlflow_deployment_check is defined and
    mlflow_deployment_check.stdout is defined and
    'not found' not in mlflow_deployment_check.stdout

  # Create namespace if needed
- name: Create MLflow namespace if it doesn't exist
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ mlflow_namespace }}"
  become: false
  when: "'not found' in mlflow_ns_check.stdout"

  # Add this task after the namespace is created but before creating IngressRoutes
- name: Create MLflow strip-prefix middleware
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: mlflow-strip-prefix
        namespace: mlflow
      spec:
        stripPrefix:
          prefixes:
            - /mlflow
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false

  # Create PVC for MLflow artifacts
- name: Create PVC for MLflow artifacts
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mlflow-artifacts
        namespace: "{{ mlflow_namespace }}"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ mlflow_pvc_size }}"
        storageClassName: nfs-client
  become: false

  # Change PVC name
- name: Create PVC for MLflow database
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ mlflow_db_pvc_name }}" # Changed name
        namespace: "{{ mlflow_namespace }}"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ mlflow_db_pvc_size }}"
        storageClassName: nfs-client

  # Deploy MLflow server - UPDATED FOR OFFICIAL IMAGE
- name: Deploy MLflow server
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mlflow
        namespace: "{{ mlflow_namespace }}"
        labels:
          app: mlflow
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: mlflow
        template:
          metadata:
            labels:
              app: mlflow
          spec:
            initContainers:
              - name: volume-permissions
                image: busybox:latest
                command:
                  - sh
                  - -c
                  - |
                    mkdir -p /mnt/mlflow /mnt/database
                    chmod -R 777 /mnt/mlflow /mnt/database
                    echo "Ensuring all required permissions are set"
                volumeMounts:
                  - name: mlflow-artifacts
                    mountPath: /mnt/mlflow
                  - name: mlflow-database
                    mountPath: /mnt/database
            containers:
              - name: mlflow
                image: "{{ mlflow_image }}"
                imagePullPolicy: IfNotPresent
                ports:
                  - containerPort: 5000
                    name: http
                command: ["mlflow"]
                args:
                  - "server"
                  - "--host=0.0.0.0"
                  - "--port=5000"
                  - "--backend-store-uri=sqlite:///mnt/database/mlflow.db"
                  - "--default-artifact-root=/mnt/mlflow"
                  - "--serve-artifacts"
                env:
                  - name: AWS_ACCESS_KEY_ID
                    value: "{{ minio_access_key }}"
                  - name: AWS_SECRET_ACCESS_KEY
                    value: "{{ minio_secret_key }}"
                  - name: MLFLOW_S3_ENDPOINT_URL
                    value: "{{ minio_endpoint }}"
                  - name: MLFLOW_S3_IGNORE_TLS
                    value: "true"
                  - name: MLFLOW_ARTIFACTS_DOWNLOAD_TIMEOUT
                    value: "180"
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 60
                  periodSeconds: 20
                  timeoutSeconds: 10
                  failureThreshold: 3
                resources:
                  requests:
                    memory: "{{ mlflow_memory_request }}"
                    cpu: "{{ mlflow_cpu_request }}"
                  limits:
                    memory: "{{ mlflow_memory_limit }}"
                    cpu: "{{ mlflow_cpu_limit }}"
                volumeMounts:
                  - name: mlflow-artifacts
                    mountPath: /mnt/mlflow
                  - name: mlflow-database
                    mountPath: /mnt/database
            volumes:
              - name: mlflow-artifacts
                persistentVolumeClaim:
                  claimName: mlflow-artifacts
              - name: mlflow-database
                persistentVolumeClaim:
                  claimName: "{{ mlflow_db_pvc_name }}"
  become: false

  # Create MLflow service
- name: Create MLflow service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: mlflow
        namespace: "{{ mlflow_namespace }}"
        labels:
          app: mlflow
      spec:
        ports:
          - port: 5000
            targetPort: 5000
            protocol: TCP
            name: http
        selector:
          app: mlflow
  become: false

  # Create NodePort service for MLflow
- name: Create NodePort service for MLflow
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: mlflow-nodeport
        namespace: "{{ mlflow_namespace }}"
        labels:
          app: mlflow
      spec:
        type: NodePort
        ports:
          - port: 5000
            targetPort: 5000
            nodePort: "{{ mlflow_nodeport }}"
            protocol: TCP
            name: http
        selector:
          app: mlflow
  become: false

  # Create Traefik IngressRoute for MLflow
- name: Create Traefik IngressRoute for MLflow
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: mlflow-ingress
        namespace: "{{ mlflow_namespace }}"
      spec:
        entryPoints:
          - web
          - websecure
        routes:
          - match: Host(`{{ mlflow_host }}`)
            kind: Rule
            services:
              - name: mlflow
                port: 5000
        tls:
          secretName: mlflow-tls
  become: false

  # Create middleware for proper routing
- name: Create strip prefix middleware
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: mlflow-strip-prefix
        namespace: mlflow
      spec:
        stripPrefix:
          prefixes:
            - /mlflow
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false

- name: Create headers middleware
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: mlflow-headers
        namespace: "{{ mlflow_namespace }}"
      spec:
        headers:
          customRequestHeaders:
            X-Script-Name: /mlflow
          customResponseHeaders:
            Access-Control-Allow-Origin: "*"
  become: false

  # Create IngressRoute for path-based access
- name: Create path-based IngressRoute
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: mlflow-path
        namespace: "{{ mlflow_namespace }}"
      spec:
        entryPoints:
          - web
          - websecure
        routes:
          - match: PathPrefix(`/mlflow`)
            kind: Rule
            services:
              - name: mlflow
                port: 5000
            middlewares:
              - name: mlflow-strip-prefix
                namespace: "{{ mlflow_namespace }}"
              - name: mlflow-headers
                namespace: "{{ mlflow_namespace }}"
        tls: {}
  become: false
  when: enable_tls

  # Update MLflow routing configuration
- name: Create MLflow routing configuration
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    verify_ssl: no
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: mlflow-route
        namespace: mlflow
      spec:
        entryPoints:
          - web
        routes:
          - match: Host(`mlflow.local`) || Host(`mlflow.{{ control_plane_ip }}.nip.io`)
            kind: Rule
            services:
              - name: mlflow
                port: 5000
  become: false

- name: Create MLflow path-based route
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    verify_ssl: no
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: mlflow-path-route
        namespace: mlflow
      spec:
        entryPoints:
          - web
        routes:
          - match: PathPrefix(`/mlflow`)
            kind: Rule
            middlewares:
              - name: mlflow-strip-prefix
            services:
              - name: mlflow
                port: 5000
  become: false

  # Generate TLS certificates for secure access if enabled
- name: Create directory for certificates
  ansible.builtin.file:
    path: /tmp/mlflow-certs
    state: directory
    mode: "0755"
  become: false
  when: enable_tls

- name: Generate self-signed certificate for MLflow
  ansible.builtin.shell: |
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout {{ tls_key_file }} -out {{ tls_cert_file }} \
      -subj "/CN={{ mlflow_host }}/O=MLflow K3s"
  args:
    creates: "{{ tls_cert_file }}"
  become: false
  when: enable_tls

- name: Create TLS secret for MLflow
  ansible.builtin.shell: |
    set -o pipefail
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} create secret tls mlflow-tls \
      --key {{ tls_key_file }} --cert {{ tls_cert_file }} --dry-run=client -o yaml | \
      kubectl --kubeconfig={{ kubeconfig_path }} apply -f -
  become: false
  register: tls_secret_result
  changed_when: "'created' in tls_secret_result.stdout or 'configured' in tls_secret_result.stdout"
  args:
    executable: /bin/bash
  when: enable_tls

  # Create a persist-data ConfigMap with script to ensure data persistence
- name: Create persistence ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: mlflow-persistence
        namespace: "{{ mlflow_namespace }}"
      data:
        ensure-persistence.sh: |
          #!/bin/sh
          # This script ensures proper permissions and persistence
          mkdir -p ${MLFLOW_ARTIFACTS_PATH}
          chmod -R 777 ${MLFLOW_ARTIFACTS_PATH}
          echo "MLflow artifact directory is configured for persistence"
          # Keep container running so volume remains mounted
          exec "$@"
  become: false

  # Wait for deployment to be ready
- name: Wait for MLflow deployment to be ready
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    rollout status deployment mlflow --timeout=180s
  register: mlflow_rollout
  become: false
  changed_when: false

  # Check logs to ensure everything is working
- name: Check MLflow pod logs
  ansible.builtin.shell: |
    POD_NAME=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    get pods -l app=mlflow -o jsonpath='{.items[0].metadata.name}')
    if [ -n "$POD_NAME" ]; then
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} logs $POD_NAME --tail=20
    else
      echo "No MLflow pod found"
    fi
  register: mlflow_logs
  become: false
  changed_when: false
  ignore_errors: true

- name: Display MLflow pod logs
  ansible.builtin.debug:
    msg: "{{ mlflow_logs.stdout_lines }}"

- name: Verify MLflow pod is running
  ansible.builtin.shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    get pods -l app=mlflow -o jsonpath='{.items[0].status.phase}'
  register: mlflow_pod_status
  become: false
  changed_when: false
  until: mlflow_pod_status.stdout == "Running"
  retries: 10
  delay: 15

  # Test access methods
- name: Test MLflow path-based access
  ansible.builtin.uri:
    url: "http://{{ control_plane_ip }}/mlflow/"
    return_content: no
    status_code: [200, 301, 302, 307, 308, 404]
  register: mlflow_path_access
  become: false
  failed_when: false

- name: Test MLflow host-based access
  ansible.builtin.uri:
    url: "http://{{ control_plane_ip }}/"
    return_content: no
    headers:
      Host: "{{ mlflow_host }}"
    status_code: [200, 301, 302, 307, 308, 404]
  register: mlflow_host_access
  become: false
  failed_when: false

- name: Test MLflow direct NodePort access
  ansible.builtin.uri:
    url: "http://{{ control_plane_ip }}:{{ mlflow_nodeport }}/"
    return_content: no
    status_code: [200, 301, 302, 307, 308, 404]
  register: mlflow_nodeport_access
  become: false
  failed_when: false

  # Make a test file to verify persistence
- name: Create test file to verify persistence
  ansible.builtin.shell: |
    POD_NAME=$(kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
    get pods -l app=mlflow -o jsonpath='{.items[0].metadata.name}')
    if [ -n "$POD_NAME" ]; then
      kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
      exec $POD_NAME -- sh -c 'echo "Test data for persistence" > /mnt/mlflow/persistence-test.txt'
    else
      echo "No MLflow pod found"
    fi
  register: persistence_test
  become: false
  changed_when: false
  ignore_errors: true

- name: Set access status variables
  ansible.builtin.set_fact:
    path_access_status: "{{ mlflow_path_access.status if mlflow_path_access is defined else 'Failed - connection error' }}"
    host_access_status: "{{ mlflow_host_access.status if mlflow_host_access is defined else 'Failed - connection error' }}"
    nodeport_access_status: "{{ mlflow_nodeport_access.status if mlflow_nodeport_access is defined else 'Failed - connection error' }}"
    persistence_status: "{{ 'Success' if persistence_test.rc == 0 else 'Failed - ' + persistence_test.stderr }}"

# Display access status
- name: Display access test results
  ansible.builtin.debug:
    msg:
      - "Access test results:"
      - "- Path-based access (/mlflow/): {{ path_access_status }}"
      - "- Host-based access ({{ mlflow_host }}): {{ host_access_status }}"
      - "- NodePort access (port {{ mlflow_nodeport }}): {{ nodeport_access_status }}"
      - "- Persistence test: {{ persistence_status }}"

  # Display installation summary
- name: Display MLflow installation summary
  ansible.builtin.debug:
    msg:
      - ==================== MLFLOW INSTALLATION SUMMARY ====================
      - MLflow has been successfully deployed.
      - ""
      - "Access URLs:"
      - "- MLflow UI via NodePort: http://{{ control_plane_ip }}:{{ mlflow_nodeport
        }}/"
      - "- MLflow UI via Path-based routing: http://{{ control_plane_ip }}/mlflow/"
      - "- MLflow UI via Host-based routing: http://{{ mlflow_host }}/"
      - "{% if enable_tls %}- MLflow UI via HTTPS (secure): https://{{ mlflow_host
        }}/{% endif %}"
      - ""
      - "MLflow Connection Details:"
      - "- Tracking URI: http://{{ control_plane_ip }}:{{ mlflow_nodeport }}/"
      - "- Artifact Root: file:{{ mlflow_artifacts_path }}"
      - ""
      - "Persistence:"
      - "- MLflow data is stored in a persistent volume that will survive reboots"
      - "- Init container ensures proper permissions on each startup"
      - "- To confirm persistence after reboot, check for file: persistence-test.txt"
      - ""
      - "Traefik Configuration:"
      - "- Path-based routing with prefix stripping enabled"
      - "- Host-based routing for clean URLs"
      - "- Custom headers middleware for proper API functionality"
      - "{% if enable_tls %}- TLS enabled with self-signed certificate{% endif %}"
      - ""
      - "Health & Monitoring:"
      - "- Readiness probe configured for proper load balancing"
      - "- Liveness probe configured for automatic recovery"
      - "- Resource limits set for stability"
      - "Verify installation with: ansible-playbook -i inventory/hosts verify_120_mlflow.yml"
      - ==================================================================
