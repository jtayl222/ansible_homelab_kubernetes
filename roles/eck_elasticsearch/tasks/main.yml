---
- name: Create namespace for Elasticsearch
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Deploy Elasticsearch
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: elasticsearch.k8s.elastic.co/v1
      kind: Elasticsearch
      metadata:
        name: elasticsearch
        namespace: "{{ namespace }}"
      spec:
        version: 8.8.1
        nodeSets:
        - name: default
          count: 1
          config:
            node.store.allow_mmap: false
          podTemplate:
            spec:
              containers:
              - name: elasticsearch
                resources:
                  requests:
                    memory: 2Gi
                    cpu: 1
                  limits:
                    memory: 4Gi
                    cpu: 2
          volumeClaimTemplates:
          - metadata:
              name: elasticsearch-data
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: "{{ storage_size }}"
              storageClassName: "{{ storage_class_name }}"
        http:
          tls:
            selfSignedCertificate:
              disabled: false
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create NodePort service for Elasticsearch
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: elasticsearch-es-nodeport
        namespace: "{{ namespace }}"
      spec:
        selector:
          elasticsearch.k8s.elastic.co/cluster-name: elasticsearch
        ports:
        - name: https
          port: 9200
          targetPort: 9200
          nodePort: 30092
        type: NodePort
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Wait for Elasticsearch to be created
  shell: |
    kubectl --kubeconfig={{ kubeconfig }} -n {{ namespace }} get elasticsearch elasticsearch -o name
  register: es_created
  until: es_created.rc == 0
  retries: 10
  delay: 10
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  changed_when: false
  ignore_errors: true

- name: Wait for Elasticsearch to be ready
  shell: |
    kubectl --kubeconfig={{ kubeconfig }} -n {{ namespace }} get elasticsearch elasticsearch -o jsonpath='{.status.health}'
  register: es_health
  until: es_health.stdout == "green" or es_health.stdout == "yellow"
  retries: 30
  delay: 20
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  changed_when: false
  ignore_errors: true

- name: Display Elasticsearch health
  debug:
    msg: "Elasticsearch health is {{ es_health.stdout | default('unknown') }}"