---
- name: Download Helm install script
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '0700'
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Install Helm
  command: /tmp/get_helm.sh
  args:
    creates: /usr/local/bin/helm
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Ensure required variables are defined
  set_fact:
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    kubeconfig: "{{ kubeconfig | default(playbook_dir + '/fetched_tokens/k3s-kubeconfig') }}"

- name: Check if Kubernetes Dashboard is already installed
  command: helm list -n kubernetes-dashboard -q
  register: dashboard_installed
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no
  ignore_errors: yes

- name: Uninstall existing Kubernetes Dashboard (if present)
  command: helm uninstall kubernetes-dashboard -n kubernetes-dashboard
  when: "'kubernetes-dashboard' in dashboard_installed.stdout"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Add Kubernetes Dashboard Helm repository
  command: helm repo add k8s-dashboard https://kubernetes.github.io/dashboard/
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no
  ignore_errors: yes

- name: Update Helm repositories
  command: helm repo update
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Install Kubernetes Dashboard using Helm
  command: >
    helm install kubernetes-dashboard k8s-dashboard/kubernetes-dashboard
    --namespace kubernetes-dashboard --create-namespace
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Create dashboard admin service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: dashboard-admin
        namespace: kubernetes-dashboard
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Create cluster role binding for dashboard admin
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dashboard-admin-binding
      subjects:
        - kind: ServiceAccount
          name: dashboard-admin
          namespace: kubernetes-dashboard
      roleRef:
        kind: ClusterRole
        name: cluster-admin
        apiGroup: rbac.authorization.k8s.io
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Create long-lived token for dashboard admin
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: dashboard-admin-token
        namespace: kubernetes-dashboard
        annotations:
          kubernetes.io/service-account.name: dashboard-admin
      type: kubernetes.io/service-account-token
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Wait for token to be generated
  command: >
    kubectl --kubeconfig={{ kubeconfig }} -n kubernetes-dashboard get secret dashboard-admin-token -o jsonpath='{.data.token}'
  register: token_check
  until: token_check.stdout != ""
  retries: 10
  delay: 5
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Create Ingress manifest for Kubernetes Dashboard
  template:
    src: dashboard-ingress.yml.j2
    dest: /tmp/dashboard-ingress.yml
  vars:
    node_ip: "{{ node_ip }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no

- name: Apply Ingress for Kubernetes Dashboard
  command: kubectl apply -f /tmp/dashboard-ingress.yml
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: no
