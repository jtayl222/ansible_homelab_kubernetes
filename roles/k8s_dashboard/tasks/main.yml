---
# 2. Install Helm on ansible controller if needed
- name: Install Helm client if needed
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Download Helm install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'

    - name: Install Helm
      ansible.builtin.command: /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm

# 3. Manage dashboard installation
- name: Check if Kubernetes Dashboard is already installed
  ansible.builtin.command: helm list -n kubernetes-dashboard -q
  environment:
    KUBECONFIG: '{{ kubeconfig }}'
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  changed_when: false
  register: dashboard_installed

- name: Manage Helm repositories
  environment:
    KUBECONFIG: '{{ kubeconfig }}'
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Add Kubernetes Dashboard Helm repository
      ansible.builtin.command: helm repo add k8s-dashboard https://kubernetes.github.io/dashboard/
      register: repo_add_result
      changed_when: "'has been added' in repo_add_result.stdout"
      failed_when:
        - repo_add_result.rc != 0
        - "'already exists' not in repo_add_result.stderr"

    - name: Update Helm repositories
      ansible.builtin.command: helm repo update
      changed_when: true

- name: Manage dashboard installation
  environment:
    KUBECONFIG: '{{ kubeconfig }}'
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Uninstall existing Kubernetes Dashboard (if needed)
      ansible.builtin.command: helm uninstall kubernetes-dashboard -n kubernetes-dashboard
      when: "'kubernetes-dashboard' in dashboard_installed.stdout"
      register: uninstall_result
      changed_when: uninstall_result.rc == 0

    - name: Install Kubernetes Dashboard using Helm
      ansible.builtin.command: >
        helm install kubernetes-dashboard k8s-dashboard/kubernetes-dashboard
        --namespace kubernetes-dashboard --create-namespace
      register: install_result
      changed_when: install_result.rc == 0

# 4. Create service account and permissions (combined into one block)
- name: Setup dashboard authentication
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Create dashboard admin service account
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ dashboard_service_account | default('dashboard-admin') }}"
            namespace: "{{ k8s_dashboard_namespace }}"

    - name: Create cluster role binding for dashboard admin
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "{{ dashboard_service_account | default('dashboard-admin') }}-binding"
          subjects:
            - kind: ServiceAccount
              name: "{{ dashboard_service_account | default('dashboard-admin') }}"
              namespace: "{{ k8s_dashboard_namespace }}"
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io

    - name: Create long-lived token for dashboard admin
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: dashboard-admin-token
            namespace: "{{ k8s_dashboard_namespace }}"
            annotations:
              kubernetes.io/service-account.name: "{{ dashboard_service_account | default('dashboard-admin') }}"
          type: kubernetes.io/service-account-token

# 5. Setup access (token retrieval)
- name: Access setup
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Wait for token to be generated
      ansible.builtin.command: >
        kubectl --kubeconfig={{ kubeconfig }} -n {{ k8s_dashboard_namespace }} \
          get secret dashboard-admin-token -o jsonpath='{.data.token}'
      register: token_check
      until: token_check.stdout != ""
      retries: 10
      delay: 5
      changed_when: false

    - name: Extract dashboard admin token
      ansible.builtin.shell: |
        set -o pipefail
        kubectl --kubeconfig={{ kubeconfig }} -n {{ k8s_dashboard_namespace }} \
          get secret dashboard-admin-token -o jsonpath='{.data.token}' | base64 -d
      args:
        executable: /bin/bash
      register: dashboard_token
      changed_when: false

    - name: Display dashboard token
      ansible.builtin.debug:
        msg:
          - Kubernetes Dashboard has been deployed via Helm
          - "You can access the dashboard with this token:"
          - "{{ dashboard_token.stdout }}"

# 6. Setup access (helper script and routes)
- name: Create access utilities
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false
  block:
    - name: Ensure generated directory exists
      ansible.builtin.file:
        path: "{{ playbook_dir }}/../generated"
        state: directory
        mode: "0755"

    - name: Create dashboard access script
      ansible.builtin.copy:
        dest: "{{ playbook_dir }}/../generated/access_dashboard.sh"
        mode: "0755"
        content: |
          #!/bin/bash

          KUBECONFIG="{{ kubeconfig }}"
          NAMESPACE="{{ k8s_dashboard_namespace }}"
          TOKEN=$(kubectl --kubeconfig=$KUBECONFIG -n $NAMESPACE \
            get secret dashboard-admin-token -o jsonpath="{.data.token}" | base64 -d)

          echo "Starting Kubernetes Dashboard using port-forwarding..."
          echo "Token is:"
          echo "$TOKEN"
          echo
          echo "Starting port-forward - press Ctrl+C to exit when done"

          kubectl --kubeconfig=$KUBECONFIG -n $NAMESPACE port-forward svc/kubernetes-dashboard 8443:443 &
          PF_PID=$!

          sleep 3

          echo "Opening browser to https://localhost:8443/"
          xdg-open https://localhost:8443/ 2>/dev/null || open https://localhost:8443/ 2>/dev/null || echo "Please open https://localhost:8443/ in your browser"

          wait $PF_PID

    - name: Create routing middleware
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: Middleware
          metadata:
            name: dashboard-headers
            namespace: "{{ k8s_dashboard_namespace }}"
          spec:
            headers:
              customRequestHeaders:
                X-Forwarded-Proto: https

    - name: Create dashboard IngressRoute
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: kubernetes-dashboard-route
            namespace: "{{ k8s_dashboard_namespace }}"
          spec:
            entryPoints:
              - web
            routes:
              - match: Host(`{{ k8s_dashboard_ingress_host }}`) || Host(`dashboard.{{ control_plane_ip }}.nip.io`)
                kind: Rule
                middlewares:
                  - name: dashboard-headers
                services:
                  - name: kubernetes-dashboard
                    port: 443
                    scheme: https
