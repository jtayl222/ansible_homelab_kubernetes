- name: Deploy properly configured Kibana
  kubernetes.core.k8s:
    kubeconfig: '{{ kubeconfig_path }}'
    state: present
    definition:
      apiVersion: kibana.k8s.elastic.co/v1
      kind: Kibana
      metadata:
        name: kibana
        namespace: '{{ elastic_namespace }}'
      spec:
        version: 8.8.1
        count: 1
        elasticsearchRef:
          name: elasticsearch
        http:
          service:
            spec:
              type: ClusterIP
          tls:
            selfSignedCertificate:
              disabled: false
        config:
          server.publicBaseUrl: https://{{ control_plane_ip }}/kibana
          server.basePath: /kibana
          server.rewriteBasePath: true
          elasticsearch.ssl.verificationMode: none
        podTemplate:
          spec:
            containers:
            - name: kibana
              env:
              - name: ELASTICSEARCH_SSL_VERIFICATIONMODE
                value: none
              resources:
                requests:
                  memory: 1Gi
                  cpu: 0.5
                limits:
                  memory: 2Gi
                  cpu: 1
              readinessProbe:
                exec:
                  command:
                  - bash
                  - -c
                  - |
                    #!/bin/bash
                    # Check if port is listening
                    if ! nc -z localhost 5601; then
                      echo "Port 5601 is not listening yet"
                      exit 1
                    fi

                    # Try to get a status from the Kibana API
                    STATUS_CODE=$(curl -k -s -o /dev/null -w "%{http_code}" "https://localhost:5601/api/status")
                    if [[ "$STATUS_CODE" == "200" ]] || [[ "$STATUS_CODE" == "503" ]]; then
                      echo "Kibana is responding with status code $STATUS_CODE"
                      exit 0
                    else
                      echo "Kibana responded with unexpected status code: $STATUS_CODE"
                      exit 1
                    fi
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Wait for Kibana pod to be created
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} wait --for=condition=initialized pod -l kibana.k8s.elastic.co/name=kibana --timeout=300s
  register: kibana_initialized
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  ignore_errors: true

- name: Create NodePort service for Kibana
  kubernetes.core.k8s:
    kubeconfig: '{{ kubeconfig_path }}'
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kibana-kb-nodeport
        namespace: '{{ elastic_namespace }}'
      spec:
        selector:
          kibana.k8s.elastic.co/name: kibana
        ports:
        - name: https
          port: 5601
          targetPort: 5601
          nodePort: 30056
        type: NodePort
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Wait for Kibana to be ready (be patient)
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} wait --for=condition=ready pod -l kibana.k8s.elastic.co/name=kibana --timeout=300s
  register: kibana_ready
  retries: 10
  delay: 30
  until: kibana_ready.rc == 0
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  ignore_errors: true

- name: Check Kibana status
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get kibana kibana -o jsonpath='{.status.health}'
  register: kibana_health
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Display Kibana health
  debug:
    msg: 'Kibana health: {{ kibana_health.stdout }}'
