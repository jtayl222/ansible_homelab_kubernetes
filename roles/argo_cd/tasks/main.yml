# Verify prerequisites
- name: Ensure kubeconfig exists
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig_stat
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false

- name: Fail if kubeconfig doesn't exist
  ansible.builtin.fail:
    msg: "Kubeconfig not found at {{ kubeconfig_path }}. Please run the kubeconfig tasks first."
  when: not kubeconfig_stat.stat.exists
  delegate_to: "{{ groups['ansible_controller'][0] }}"
  become: false

- name: Ensure argocd namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ argocd_namespace }}"
    state: present
    kubeconfig: "{{ kubeconfig_path }}"  # Make sure to specify the kubeconfig path

- name: Install Argo CD components
  kubernetes.core.k8s:
    state: present
    src: "{{ argocd_manifest_url }}"
    namespace: "{{ argocd_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"  # Add this line

- name: Patch argocd-server service to be NodePort (optional for local access)
  kubernetes.core.k8s:
    api_version: v1
    kind: Service
    name: argocd-server
    namespace: "{{ argocd_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"  # Add this line
    definition:
      metadata:
        name: argocd-server
      spec:
        type: NodePort
  register: service_patch_result
  failed_when:
    - service_patch_result is failed
    - "'already present' not in service_patch_result.msg | default('')"
    - "'not found' not in service_patch_result.msg | default('')"

  # Create ServersTransport for secure communication
- name: Create ServersTransport for ArgoCD
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: ServersTransport
      metadata:
        name: argocd-transport
        namespace: "{{ argocd_namespace }}"
      spec:
        insecureSkipVerify: true

  # Create CORS middleware
- name: Create CORS middleware for ArgoCD
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: argocd-cors
        namespace: "{{ argocd_namespace }}"
      spec:
        headers:
          accessControlAllowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          accessControlAllowHeaders:
            - "*"
          accessControlAllowOriginList:
            - "*"
          accessControlMaxAge: 100
          addVaryHeader: true

  # Create HTTP to HTTPS redirect middleware
- name: Create HTTP to HTTPS redirect middleware
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: redirect-to-https
        namespace: "{{ argocd_namespace }}"
      spec:
        redirectScheme:
          scheme: https
          permanent: true

  # Create Traefik IngressRoute for HTTPS
- name: Create IngressRoute for ArgoCD HTTPS
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: argocd-server-https
        namespace: "{{ argocd_namespace }}"
      spec:
        entryPoints:
          - websecure
        routes:
          - match: Host(`{{ argocd_host }}`)
            kind: Rule
            middlewares:
              - name: argocd-cors
            services:
              - name: argocd-server
                port: 443
                scheme: https
                serversTransport: argocd-transport
        tls: {}

  # Create Traefik IngressRoute for HTTP (with redirect)
- name: Create IngressRoute for ArgoCD HTTP
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: argocd-server-http
        namespace: "{{ argocd_namespace }}"
      spec:
        entryPoints:
          - web
        routes:
          - match: Host(`{{ argocd_host }}`)
            kind: Rule
            middlewares:
              - name: redirect-to-https
            services:
              - name: argocd-server
                port: 80
                scheme: http

- name: Display Argo CD access information
  ansible.builtin.debug:
    msg: |
      Argo CD installed!

      Access methods:
      1. Web UI: https://{{ argocd_host }}
      2. NodePort: https://<your-node-ip>:<nodeport>

      Initial admin password:
      kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
