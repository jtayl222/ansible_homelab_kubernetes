- name: Install Argo CD on K3s
  hosts: localhost
  gather_facts: false
  vars:
    argocd_namespace: argocd
    argocd_manifest_url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    argocd_host: argocd.local
    argocd_server_service_patch: |
      spec:
        type: NodePort

  tasks:
    - name: Ensure argocd namespace exists
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ argocd_namespace }}"
        state: present

    - name: Install Argo CD components
      kubernetes.core.k8s:
        state: present
        src: "{{ argocd_manifest_url }}"
        namespace: "{{ argocd_namespace }}"

    - name: Patch argocd-server service to be NodePort (optional for local access)
      kubernetes.core.k8s:
        api_version: v1
        kind: Service
        name: argocd-server
        namespace: "{{ argocd_namespace }}"
        definition:
          metadata:
            name: argocd-server
          spec:
            type: NodePort
      register: service_patch_result
      failed_when:
        - service_patch_result is failed
        - "'already present' not in service_patch_result.msg | default('')"
        - "'not found' not in service_patch_result.msg | default('')"

      # Create ServersTransport for secure communication
    - name: Create ServersTransport for ArgoCD
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: ServersTransport
          metadata:
            name: argocd-transport
            namespace: "{{ argocd_namespace }}"
          spec:
            insecureSkipVerify: true

      # Create CORS middleware
    - name: Create CORS middleware for ArgoCD
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: Middleware
          metadata:
            name: argocd-cors
            namespace: "{{ argocd_namespace }}"
          spec:
            headers:
              accessControlAllowMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - OPTIONS
              accessControlAllowHeaders:
                - "*"
              accessControlAllowOriginList:
                - "*"
              accessControlMaxAge: 100
              addVaryHeader: true

      # Create HTTP to HTTPS redirect middleware
    - name: Create HTTP to HTTPS redirect middleware
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: Middleware
          metadata:
            name: redirect-to-https
            namespace: "{{ argocd_namespace }}"
          spec:
            redirectScheme:
              scheme: https
              permanent: true

      # Create Traefik IngressRoute for HTTPS
    - name: Create IngressRoute for ArgoCD HTTPS
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: argocd-server-https
            namespace: "{{ argocd_namespace }}"
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`{{ argocd_host }}`)
                kind: Rule
                middlewares:
                  - name: argocd-cors
                services:
                  - name: argocd-server
                    port: 443
                    scheme: https
                    serversTransport: argocd-transport
            tls: {}

      # Create Traefik IngressRoute for HTTP (with redirect)
    - name: Create IngressRoute for ArgoCD HTTP
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: argocd-server-http
            namespace: "{{ argocd_namespace }}"
          spec:
            entryPoints:
              - web
            routes:
              - match: Host(`{{ argocd_host }}`)
                kind: Rule
                middlewares:
                  - name: redirect-to-https
                services:
                  - name: argocd-server
                    port: 80
                    scheme: http

    - name: Display Argo CD access information
      ansible.builtin.debug:
        msg: |
          Argo CD installed!

          Access methods:
          1. Web UI: https://{{ argocd_host }}
          2. NodePort: https://<your-node-ip>:<nodeport>

          Initial admin password:
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
