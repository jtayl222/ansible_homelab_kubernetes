- name: Deploy NFS provisioner to Kubernetes cluster
  hosts: k3s_control_plane
  become: true # Add become: true to run with sudo privileges
  gather_facts: true
  vars:
    nfs_server: 192.168.1.100 # Your utility node IP
    nfs_path: /srv/nfs/kubernetes
    storage_class_name: nfs-client
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
  tasks:
    - name: Create directory for kubeconfig
      ansible.builtin.file:
        path: "{{ playbook_dir }}/fetched_tokens"
        state: directory
        mode: "0700"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: inventory_hostname == groups['k3s_control_plane'][0]

      # Use become: true to read the protected k3s.yaml file
    - name: Fetch kubeconfig from control plane node
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_path }}"
        flat: true
        # Note: This task inherits the become: true from the play level

    - name: Update kubeconfig to use cluster IP
      ansible.builtin.replace:
        path: "{{ kubeconfig_path }}"
        regexp: https://127.0.0.1:6443
        replace: https://{{ ansible_host }}:6443
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false

    - name: Fix permissions on kubeconfig
      ansible.builtin.file:
        path: "{{ kubeconfig_path }}"
        mode: "0600"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false

- name: Deploy NFS CSI provisioner in Kubernetes
  hosts: ansible_controller
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    nfs_server: "{{ hostvars[groups['nfs_server'][0]]['ansible_host'] }}"
    nfs_path: /srv/nfs/kubernetes
  tasks:
    # Check if StorageClass already exists
    - name: Check if NFS StorageClass already exists
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get sc nfs-client -o name 2>/dev/null || echo "not_found"
      register: nfs_sc
      become: false
      changed_when: false

      # Delete existing StorageClass if parameters need to change
    - name: Delete existing StorageClass if found
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          delete sc nfs-client
      when: nfs_sc.stdout != "not_found"
      become: false
      register: sc_deleted
      changed_when: sc_deleted.rc == 0

    - name: Create namespace for NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: nfs-provisioner
      become: false
      delegate_to: "{{ groups['ansible_controller'][0] }}"
