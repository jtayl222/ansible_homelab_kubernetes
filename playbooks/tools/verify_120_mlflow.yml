# filepath: /home/user/ansible_homelab_kubernetes/verify_120_mlflow.yml
- name: Verify MLflow Deployment
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/../fetched_tokens//k3s-kubeconfig"
    mlflow_namespace: mlflow
    control_plane_ip:
      "{{ hostvars[groups['k3s_control_plane'][0]]['ansible_host']
      }}"
    mlflow_nodeport: 30120
    mlflow_host: mlflow.{{ control_plane_ip }}.nip.io

  tasks:
    # Check if MLflow namespace exists
    - name: Check if MLflow namespace exists
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
          get namespace {{ mlflow_namespace }} -o name 2>/dev/null || echo "not found"
      register: mlflow_ns
      become: false
      changed_when: false

    - name: Display MLflow namespace status
      ansible.builtin.debug:
        msg:
          "MLflow namespace: {{ 'Found' if 'not found' not in mlflow_ns.stdout else
          'Not found' }}"
    - name: Fail if MLflow namespace doesn't exist
      ansible.builtin.fail:
        msg: MLflow namespace not found. Please run install_120_mlflow.yml first.
      when: "'not found' in mlflow_ns.stdout"

      # Check if MLflow pod is running
    - name: Verify MLflow pods are running
      ansible.builtin.shell: |
        set -o pipefail
        kubectl --kubeconfig={{ kubeconfig_path }} get pods -n {{ mlflow_namespace }} | grep -c "Running" || echo "0"
      register: mlflow_pods
      changed_when: false
      args:
        executable: /bin/bash

    - name: Display MLflow pod status
      ansible.builtin.debug:
        msg: "MLflow pods: {{ mlflow_pods.stdout }}"

      # Get pod details
    - name: Get MLflow pod details
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
          get pods -l app=mlflow -o wide
      register: mlflow_pod_details
      become: false
      changed_when: false

    - name: Display MLflow pod details
      ansible.builtin.debug:
        msg: "{{ mlflow_pod_details.stdout_lines }}"

      # Check if services are available
    - name: Verify MLflow services
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
          get services -l app=mlflow -o wide
      register: mlflow_services
      become: false
      changed_when: false

    - name: Display MLflow service details
      ansible.builtin.debug:
        msg: "{{ mlflow_services.stdout_lines }}"

      # Check NodePort service
    - name: Verify MLflow NodePort service
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
          get service mlflow-nodeport -o jsonpath='{.spec.ports[0].nodePort}'
      register: nodeport_check
      become: false
      changed_when: false
      ignore_errors: true

      # Check ingress
    - name: Verify MLflow IngressRoute
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
          get ingressroutes -n {{ mlflow_namespace }} mlflow-ingress -o name 2>/dev/null || echo "not found"
      register: ingress_check
      become: false
      changed_when: false
      ignore_errors: true

      # Test access
    - name: Test MLflow API access via NodePort
      ansible.builtin.uri:
        url: "http://{{ control_plane_ip }}:{{ mlflow_nodeport }}/api/2.0/mlflow/experiments/list"
        method: GET
        return_content: yes
        status_code: [200, 404, 403, 401, 502]  # Accept various status codes for verification
        validate_certs: no
      register: api_access
      failed_when: false

    - name: Test MLflow UI access via NodePort
      ansible.builtin.uri:
        url: "http://{{ control_plane_ip }}:{{ mlflow_nodeport }}/"
        method: GET
        return_content: yes
        status_code: [200, 404, 403, 401, 502]
        validate_certs: no
      register: ui_access_nodeport
      failed_when: false

    - name: Test MLflow UI access via Ingress
      ansible.builtin.uri:
        url: "http://{{ mlflow_host }}/"
        method: GET
        return_content: yes
        status_code: [200, 404, 403, 401, 502]
        validate_certs: no
      register: ui_access_ingress
      failed_when: false

      # Check for PVC
    - name: Verify MLflow PVC
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
          get pvc mlflow-artifacts -o jsonpath='{.status.phase}'
      register: mlflow_pvc
      become: false
      changed_when: false
      ignore_errors: true

      # Check logs for errors
    - name: Check MLflow logs for errors
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ mlflow_namespace }} \
          logs -l app=mlflow --tail=20 | grep -i error || echo "No errors found in recent logs"
      register: mlflow_logs
      become: false
      changed_when: false
      ignore_errors: true

      # Set verification status
    - name: Set verification status
      ansible.builtin.set_fact:
        mlflow_healthy: >-
          {{
            'Running' in mlflow_pods.stdout and
            nodeport_check.stdout == mlflow_nodeport | string and
            'not found' not in ingress_check.stdout and
            api_access.status == 200 and
            ui_access_nodeport.status == 200 and
            mlflow_pvc.stdout == 'Bound'
          }}

      # Display summary
    - name: Display MLflow verification results
      ansible.builtin.debug:
        msg:
          - "MLflow Verification Results:"
          - "--------------------------------------"
          - "MLflow deployment exists: {{ 'Yes' if 'Running' in mlflow_pods.stdout else
            'No' }}"
          - "MLflow services: {{ 'Configured' if mlflow_services.stdout_lines | length >
            0 else 'Not configured' }}"
          - "NodePort service ({{ mlflow_nodeport }}): {{ 'Available' if nodeport_check.stdout
            == mlflow_nodeport | string else 'Not available' }}"
          - "IngressRoute: {{ 'Configured' if 'not found' not in ingress_check.stdout
            else 'Not configured' }}"
          - "PVC Status: {{ mlflow_pvc.stdout if mlflow_pvc.stdout else 'Not available'
            }}"
          - "API access: {{ api_access.status if api_access.status else 'Failed' }}"
          - "UI access via NodePort: {{ ui_access_nodeport.status if ui_access_nodeport.status
            else 'Failed' }}"
          - "UI access via Ingress: {{ ui_access_ingress.status if ui_access_ingress.status
            else 'Failed' }}"
          - "Recent log entries: {{ (mlflow_logs.stdout_lines | join(' '))[:200] + '...'
            if mlflow_logs.stdout_lines | length > 0 else 'Could not retrieve logs' }}"
          - "--------------------------------------"
          - "Overall status: {{ 'HEALTHY' if mlflow_healthy else 'ISSUES DETECTED' }}"

    - name: Display verification results
      ansible.builtin.debug:
        msg:
          - "==================== MLFLOW VERIFICATION RESULTS ===================="
          - "MLflow namespace: {{ 'Created' if 'not found' not in mlflow_ns.stdout else 'Not found - installation failed' }}"
          - "MLflow services: {{ 'Configured' if mlflow_services.stdout_lines | length > 0 else 'Not configured' }}"
          - "MLflow pods: {{ mlflow_pods.stdout }} running"
          - "MLflow PVC: {{ 'Created' if mlflow_pvc.stdout == 'Bound' else 'Not created' }}"
          - >-
            NodePort service ({{ mlflow_nodeport }}): {{ 'Available' if nodeport_check.stdout == mlflow_nodeport | string
              else 'Not available' }}
          - >-
            API access via NodePort: {{ 'Working' if api_access.status is defined and api_access.status == 200
            else 'Not working' }}
          - >-
            UI access via NodePort: {{ 'Working' if ui_access_nodeport.status is defined
              and ui_access_nodeport.status == 200 else 'Not working' }}
          - >-
            UI access via Ingress ({{ mlflow_host }}): {{ 'Working' if ui_access_ingress.status is defined
              and ui_access_ingress.status == 200 else 'Not working' }}

      # Access information
    - name: Display MLflow access information
      ansible.builtin.debug:
        msg:
          - "MLflow Access Information:"
          - "--------------------------------------"
          - "NodePort URL: http://{{ control_plane_ip }}:{{ mlflow_nodeport }}/"
          - "Ingress URL: http://{{ mlflow_host }}/"
          - "MLflow Tracking URI for clients: http://{{ control_plane_ip }}:{{ mlflow_nodeport
            }}"
          - "--------------------------------------"

      # Fail if not healthy and force_fail is true
    - name: Fail if MLflow is not healthy (with override option)
      ansible.builtin.fail:
        msg: MLflow verification failed. See output above for details.
      when: not mlflow_healthy and (force_fail | default(false))
