# filepath: /home/user/ansible_homelab_kubernetes/uninstall_140_minio.yml
- name: Uninstall MinIO Object Storage
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/../fetched_tokens//k3s-kubeconfig"
    minio_namespace: minio
    minio_chart_repo: bitnami
    minio_chart_name: minio
  tasks:
    # 1. Check if kubeconfig exists
    - name: Ensure kubeconfig exists
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat

    - name: Fail if kubeconfig doesn't exist
      ansible.builtin.fail:
        msg: Kubeconfig not found at {{ kubeconfig_path }}. Cannot proceed with uninstallation.
      when: not kubeconfig_stat.stat.exists

      # 2. Check if MinIO namespace exists
    - name: Check if MinIO namespace exists
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
          get namespace {{ minio_namespace }} -o name 2>/dev/null || echo "not found"
      register: minio_ns
      become: false
      changed_when: false

    - name: Skip cleanup if MinIO namespace doesn't exist
      ansible.builtin.debug:
        msg: MinIO namespace not found. Nothing to clean up.
      when: "'not found' in minio_ns.stdout"

      # 3. Proceed with cleanup if namespace exists
    - name: Proceed with cleanup
      when: "'not found' not in minio_ns.stdout"
      block:
        # Check if MinIO helm release exists
        - name: Check if MinIO Helm release exists
          ansible.builtin.shell: |
            helm --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} list | grep minio || echo "not found"
          register: minio_helm_check
          become: false
          changed_when: false
          ignore_errors:
            true

            # Display MinIO release information if it exists
        - name: Display MinIO release information
          ansible.builtin.debug:
            msg:
              "MinIO Helm release: {{ 'Found - will be removed' if 'not found' not
              in minio_helm_check.stdout else 'Not found' }}"

            # Uninstall MinIO Helm release
        - name: Uninstall MinIO Helm release
          kubernetes.core.helm:
            kubeconfig: "{{ kubeconfig_path }}"
            release_name: minio
            release_namespace: "{{ minio_namespace }}"
            state: absent
            wait: true
          become: false
          ignore_errors: true
          register: helm_uninstall
          when:
            "'not found' not in minio_helm_check.stdout"

            # Delete custom resources not managed by Helm
        - name: Delete NodePort services
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} \
              delete service minio-nodeport minio-console-nodeport 2>/dev/null || echo "No services found"
          register: service_deleted
          become: false
          changed_when: "'deleted' in service_deleted.stdout"
          ignore_errors: true

        - name: Delete IngressRoutes
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} \
              delete ingressroute minio-api-ingress minio-console-ingress 2>/dev/null || echo "No IngressRoutes found"
          register: ingress_deleted
          become: false
          changed_when: "'deleted' in ingress_deleted.stdout"
          ignore_errors:
            true

            # Check for any remaining PVCs
        - name: Check for MinIO PVCs
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} \
              get pvc --selector="app.kubernetes.io/name=minio" -o name 2>/dev/null || echo "No PVCs found"
          register: minio_pvcs
          become: false
          changed_when: false
          ignore_errors:
            true

            # Delete PVCs if any are found
        - name: Delete MinIO PVCs
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} \
              delete {{ item }} 2>/dev/null
          register: pvc_deleted
          with_items: "{{ minio_pvcs.stdout_lines }}"
          become: false
          changed_when: "'deleted' in pvc_deleted.stdout"
          ignore_errors: true
          when:
            "'No PVCs found' not in minio_pvcs.stdout"

            # Delete any remaining resources
        - name: Delete all remaining resources
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} \
              delete all --all --timeout=30s
          become: false
          register: all_deleted
          changed_when: true
          ignore_errors:
            true

            # Wait for resources to be deleted
        - name: Wait for resources to be deleted
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} get all
          register: remaining_resources
          become: false
          changed_when: false
          ignore_errors: true

        - name: Display remaining resources
          ansible.builtin.debug:
            msg: "{{ remaining_resources.stdout_lines }}"
          when:
            remaining_resources.stdout | length > 0

            # Delete the namespace
        - name: Delete MinIO namespace
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              delete namespace {{ minio_namespace }} --timeout=30s
          become: false
          register: namespace_deleted
          changed_when: true
          ignore_errors:
            true

            # Final verification
        - name: Verify MinIO namespace is deleted
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get namespace {{ minio_namespace }} -o name 2>/dev/null || echo "Namespace deleted successfully"
          register: verify_ns_deleted
          become: false
          changed_when: false
          ignore_errors: true

        - name: Display verification result
          ansible.builtin.debug:
            msg: "Verification: {{ verify_ns_deleted.stdout }}"

      # Display uninstallation summary
    - name: Display uninstallation summary
      ansible.builtin.debug:
        msg: |-
          ==================== MINIO UNINSTALLATION SUMMARY ====================
          Status: {% if 'not found' in minio_ns.stdout
          or 'Namespace deleted successfully' in verify_ns_deleted.stdout %}Successfully uninstalled{% else %}
          Uninstallation had issues - check output{% endif %}

          Details:
          {% if 'not found' not in minio_ns.stdout %}
          - Helm Release Deletion: >-
            {%- if helm_uninstall is defined and
                helm_uninstall.status is defined and
                helm_uninstall.status.status == 'UNINSTALLED' -%}
            Success
            {%- else -%}
            Not applicable or failed
            {%- endif -%}
          - Services Deletion: {% if service_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - IngressRoutes Deletion: {% if ingress_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - PVC Deletion: {% if pvc_deleted is defined and pvc_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - Remaining Resource Cleanup: {% if all_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - Namespace Deletion: >-
            {%- if namespace_deleted.rc == 0 -%}
            Success
            {%- else -%}
            Failed - may need manual cleanup
            {%- endif -%}
          {% else %}
          - No MinIO installation found
          {% endif %}

          Next Steps:
          - If any resources couldn't be deleted, you may need to manually clean them up
          - If namespace is stuck in 'Terminating' state, check for finalizers with:
            kubectl --kubeconfig={{ kubeconfig_path }} get namespace {{ minio_namespace }} -o yaml
          - To remove finalizers: >-
            kubectl --kubeconfig={{ kubeconfig_path }} patch namespace {{ minio_namespace }}
            -p '{"metadata":{"finalizers":[]}}' --type=merge
          ==================================================================
