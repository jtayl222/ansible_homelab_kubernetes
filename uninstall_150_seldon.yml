- name: Uninstall Seldon Core for ML Model Deployment
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    seldon_namespace: seldon-system
    seldon_chart_repo: seldon
    seldon_chart_name: seldon-core-operator
  tasks:
    # 1. Check if kubeconfig exists
    - name: Ensure kubeconfig exists
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat

    - name: Fail if kubeconfig doesn't exist
      fail:
        msg: Kubeconfig not found at {{ kubeconfig_path }}. Cannot proceed with uninstallation.
      when: not kubeconfig_stat.stat.exists

      # 2. Check if Seldon namespace exists
    - name: Check if Seldon namespace exists
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
          get namespace {{ seldon_namespace }} -o name 2>/dev/null || echo "not found"
      register: seldon_ns
      become: false
      changed_when: false

    - name: Skip cleanup if Seldon namespace doesn't exist
      ansible.builtin.debug:
        msg: Seldon namespace not found. Nothing to clean up.
      when: "'not found' in seldon_ns.stdout"

      # 3. Proceed with cleanup if namespace exists
    - name: Proceed with cleanup
      when: "'not found' not in seldon_ns.stdout"
      block:
        # Remove any deployed models
        - name: Remove any deployed SeldonDeployments
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              get seldondeployments.machinelearning.seldon.io -o name 2>/dev/null \
                | xargs -r kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} delete --timeout=60s
          ignore_errors: true
          become: false
          changed_when: true
          register:
            seldon_deployments_deleted

            # Check if Seldon helm release exists
        - name: Check if Seldon Helm release exists
          ansible.builtin.shell: |
            helm --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} list | grep seldon-core || echo "not found"
          register: seldon_helm_check
          become: false
          changed_when: false
          ignore_errors:
            true

            # Display Seldon release information if it exists
        - name: Display Seldon release information
          ansible.builtin.debug:
            msg:
              "Seldon Helm release: {{ 'Found - will be removed' if 'not found' not
              in seldon_helm_check.stdout else 'Not found' }}"

            # Uninstall Seldon Helm release
        - name: Uninstall Seldon Helm release
          kubernetes.core.helm:
            kubeconfig: "{{ kubeconfig_path }}"
            release_name: seldon-core
            release_namespace: "{{ seldon_namespace }}"
            state: absent
            wait: true
          become: false
          ignore_errors: true
          register: helm_uninstall
          when:
            "'not found' not in seldon_helm_check.stdout"

            # Delete custom resources not managed by Helm
        - name: Delete NodePort services and other custom resources
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              delete service seldon-nodeport 2>/dev/null || echo "Service not found"
          register: service_deleted
          become: false
          changed_when: "'deleted' in service_deleted.stdout"
          ignore_errors: true

        - name: Delete IngressRoutes
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              delete ingressroute seldon-ingress seldon-models-ingress 2>/dev/null || echo "No IngressRoutes found"
          register: ingress_deleted
          become: false
          changed_when: "'deleted' in ingress_deleted.stdout"
          ignore_errors: true

        - name: Delete Middleware resources
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              delete middleware seldon-path-strip 2>/dev/null || echo "No Middleware found"
          register: middleware_deleted
          become: false
          changed_when: "'deleted' in middleware_deleted.stdout"
          ignore_errors: true

        - name: Delete MinIO credential secret
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              delete secret seldon-minio-secret 2>/dev/null || echo "Secret not found"
          register: secret_deleted
          become: false
          changed_when: "'deleted' in secret_deleted.stdout"
          ignore_errors:
            true

            # Wait for resources to be deleted
        - name: Wait for models to be terminated
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
              get pods -l seldon-deployment-id -o name 2>/dev/null || echo "No model pods found"
          register: model_pods
          become: false
          changed_when: false
          ignore_errors: true
          retries: 5
          delay: 5
          until:
            model_pods.stdout == "No model pods found" or "'No resources found' in
            model_pods.stderr"

            # Clean up CRDs if they exist (optional - can be dangerous if shared)
        - name: Check for Seldon CRDs
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get crd | grep seldon || echo "No Seldon CRDs found"
          register: seldon_crds
          become: false
          changed_when: false
          ignore_errors: true

        - name: Delete Seldon CRDs if requested
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              delete crd seldondeployments.machinelearning.seldon.io 2>/dev/null || echo "CRD not found"
          register: crds_deleted
          become: false
          changed_when: "'deleted' in crds_deleted.stdout"
          ignore_errors: true
          when:
            seldon_crds.stdout != "No Seldon CRDs found"

            # Delete any remaining resources
        - name: Delete all remaining resources
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} delete all --all --timeout=30s
          become: false
          register: all_deleted
          changed_when: true
          ignore_errors:
            true

            # Delete the namespace
        - name: Delete Seldon namespace
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} delete namespace {{ seldon_namespace }} --timeout=60s
          become: false
          register: namespace_deleted
          changed_when: true
          ignore_errors:
            true

            # Check if namespace is stuck in Terminating state
        - name: Check if namespace is stuck in Terminating
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get namespace {{ seldon_namespace }} -o json 2>/dev/null | grep Terminating || echo "Namespace deleted or not found"
          register: ns_terminating
          become: false
          changed_when: false
          ignore_errors: true
          when:
            namespace_deleted.rc != 0

            # Force namespace removal if stuck
        - name: Force remove finalizers if namespace is stuck
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get namespace {{ seldon_namespace }} -o json | jq '.spec.finalizers = []' \
              | kubectl --kubeconfig={{ kubeconfig_path }} replace --raw "/api/v1/namespaces/{{ seldon_namespace }}/finalize" -f -
          become: false
          changed_when: true
          ignore_errors: true
          when:
            namespace_deleted.rc != 0 and "Terminating" in ns_terminating.stdout

            # Final verification
        - name: Verify Seldon namespace is deleted
          ansible.builtin.shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get namespace {{ seldon_namespace }} -o name 2>/dev/null || echo "Namespace deleted successfully"
          register: verify_ns_deleted
          become: false
          changed_when: false
          ignore_errors: true

      # 4. Clean up local example files
    - name: Remove local example files
      ansible.builtin.file:
        path: "{{ playbook_dir }}/seldon-examples"
        state: absent
      become: false
      ignore_errors: true

      # Display uninstallation summary
    - name: Display uninstallation summary
      ansible.builtin.debug:
        msg: "{{ uninstall_summary }}"
      vars:
        uninstall_summary: |-
          ==================== SELDON CORE UNINSTALLATION SUMMARY ====================
          Status: {% if 'not found' in seldon_ns.stdout or 'Namespace deleted successfully' in verify_ns_deleted.stdout %} \
          Successfully uninstalled{% else %}Uninstallation had issues - check output{% endif %}

          Details:
          {% if 'not found' not in seldon_ns.stdout %}
          - Model Deployments Removed: {% if seldon_deployments_deleted is defined and seldon_deployments_deleted.rc == 0 %} \
          Success{% else %}Not applicable or failed{% endif %}
          - Helm Release Deletion: {% if helm_uninstall is defined and helm_uninstall.status is defined and helm_uninstall.status is not none and helm_uninstall.status.status == 'UNINSTALLED' %}Success{% else %}Not applicable or failed{% endif %}
          - Services Deletion: {% if service_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - IngressRoutes Deletion: {% if ingress_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - Middleware Deletion: {% if middleware_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - Secret Deletion: {% if secret_deleted.rc == 0 %}Success{% else %}Failed or not found{% endif %}
          - CRD Deletion: {% if crds_deleted is defined and crds_deleted.rc == 0 %}Success{% else %}Not performed or failed{% endif %}
          - Namespace Deletion: {% if namespace_deleted.rc == 0 %}Success{% else %}Failed - may need manual cleanup{% endif %}
          {% else %}
          - No Seldon installation found
          {% endif %}

          Next Steps:
          {% if 'not found' not in seldon_ns.stdout and 'Namespace deleted successfully' not in verify_ns_deleted.stdout %}
          - If namespace is stuck in 'Terminating' state, manually remove finalizers:
            kubectl --kubeconfig={{ kubeconfig_path }} \
              get namespace {{ seldon_namespace }} -o json | jq '.spec.finalizers = []' \
                | kubectl --kubeconfig={{ kubeconfig_path }} replace --raw "/api/v1/namespaces/{{ seldon_namespace }}/finalize" -f -
          {% else %}
          - Seldon Core has been successfully uninstalled
          - You can now reinstall with install_150_seldon.yml if needed
          {% endif %}
          ==================================================================
