---
# filepath: /home/user/ansible_homelab_kubernetes/uninstall_140_minio.yml
- name: Uninstall MinIO Object Storage
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    minio_namespace: "minio"
    
  tasks:
    # 1. Check if kubeconfig exists
    - name: Ensure kubeconfig exists
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat
      
    - name: Fail if kubeconfig doesn't exist
      fail:
        msg: "Kubeconfig not found at {{ kubeconfig_path }}. Cannot proceed with uninstallation."
      when: not kubeconfig_stat.stat.exists

    # 2. Check if MinIO namespace exists
    - name: Check if MinIO namespace exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} get namespace {{ minio_namespace }} -o name 2>/dev/null || echo "not found"
      register: minio_ns
      become: false
      changed_when: false

    - name: Skip cleanup if MinIO namespace doesn't exist
      debug:
        msg: "MinIO namespace not found. Nothing to clean up."
      when: "'not found' in minio_ns.stdout"

    # 3. Proceed with cleanup if namespace exists
    - name: Proceed with cleanup
      when: "'not found' not in minio_ns.stdout"
      block:
        - name: Uninstall MinIO Helm release
          kubernetes.core.helm:
            kubeconfig: "{{ kubeconfig_path }}"
            release_name: minio
            release_namespace: "{{ minio_namespace }}"
            state: absent
          become: false
          ignore_errors: true
          register: helm_uninstall

        - name: Delete NodePort services 
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} delete service minio-nodeport minio-console-nodeport 2>/dev/null || echo "No services found"
          register: service_deleted
          become: false
          changed_when: "'deleted' in service_deleted.stdout"
          ignore_errors: true

        - name: Delete IngressRoutes
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} delete ingressroute minio-api-ingress minio-console-ingress 2>/dev/null || echo "No IngressRoutes found"
          register: ingress_deleted
          become: false
          changed_when: "'deleted' in ingress_deleted.stdout"
          ignore_errors: true

        - name: Delete MinIO credentials secret
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} delete secret minio-credentials 2>/dev/null || echo "No secret found"
          register: secret_deleted
          become: false
          changed_when: "'deleted' in secret_deleted.stdout"
          ignore_errors: true

        - name: Delete PVCs
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} delete pvc --all 2>/dev/null || echo "No PVCs found"
          register: pvc_deleted
          become: false
          changed_when: "'deleted' in pvc_deleted.stdout"
          ignore_errors: true

        - name: Wait for resources to be deleted
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} -n {{ minio_namespace }} get all
          register: remaining_resources
          become: false
          changed_when: false
          ignore_errors: true
          
        - name: Display remaining resources
          debug:
            msg: "{{ remaining_resources.stdout_lines }}"
          when: remaining_resources.stdout | length > 0

        - name: Delete MinIO namespace
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} delete namespace {{ minio_namespace }} --timeout=30s
          become: false
          register: namespace_deleted
          changed_when: true
          ignore_errors: true
          
        # Final verification
        - name: Verify MinIO namespace is deleted
          shell: |
            kubectl --kubeconfig={{ kubeconfig_path }} get namespace {{ minio_namespace }} -o name 2>/dev/null || echo "Namespace deleted successfully"
          register: verify_ns_deleted
          become: false
          changed_when: false
          ignore_errors: true
          
        - name: Display verification result
          debug:
            msg: "Verification: {{ verify_ns_deleted.stdout }}"

    # Display uninstallation summary
    - name: Display uninstallation summary
      debug:
        msg: |
          ==================== MINIO UNINSTALLATION SUMMARY ====================
          Status: {{ 'Successfully uninstalled' if 'not found' in minio_ns.stdout or 'Namespace deleted successfully' in verify_ns_deleted.stdout else 'Uninstallation had issues - check output' }}
          
          Details:
          {% if 'not found' not in minio_ns.stdout %}
          - Helm Release Deletion: {{ 'Success' if helm_uninstall.status is defined and helm_uninstall.status.status == 'UNINSTALLED' else 'Failed or not found' }}
          - Services Deletion: {{ 'Success' if service_deleted.rc == 0 else 'Failed or not found' }}
          - IngressRoutes Deletion: {{ 'Success' if ingress_deleted.rc == 0 else 'Failed or not found' }}
          - Secret Deletion: {{ 'Success' if secret_deleted.rc == 0 else 'Failed or not found' }}
          - PVC Deletion: {{ 'Success' if pvc_deleted.rc == 0 else 'Failed or not found' }}
          - Namespace Deletion: {{ 'Success' if namespace_deleted.rc == 0 else 'Failed - may need manual cleanup' }}
          {% else %}
          - No MinIO installation found
          {% endif %}
          
          Next Steps:
          - If any resources couldn't be deleted, you may need to manually clean them up
          - If namespace is stuck in 'Terminating' state, check for finalizers
          ==================================================================