---
- name: Configure Ingress for ECK
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    elastic_namespace: "elastic"
    control_plane_ip: "{{ hostvars['NUC8i5BEHS']['ansible_host'] | default('192.168.1.85') }}"

  tasks:
    # First get information about working Grafana route to model our config after
    - name: Get working Grafana route information
      shell: |
        echo "=== Grafana IngressRoute ==="
        kubectl --kubeconfig={{ kubeconfig_path }} get ingressroute -A -l app=grafana -o yaml || echo "No Grafana IngressRoute found"
      register: grafana_route
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display Grafana route information
      debug:
        msg: "{{ grafana_route.stdout_lines }}"

    # Check service information to ensure we're using the right services
    - name: Check available services
      shell: |
        echo "=== All Services in Elastic namespace ==="
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get svc
      register: elastic_services
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      changed_when: false

    - name: Display elastic services
      debug:
        msg: "{{ elastic_services.stdout_lines }}"

    # Create a simpler set of ingress routes based on the working Grafana model
    - name: Create middleware for all elastic services
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: Middleware
          metadata:
            name: elastic-strip-prefix
            namespace: "{{ elastic_namespace }}"
          spec:
            stripPrefix:
              prefixes:
                - /elasticsearch
                - /kibana
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    - name: Create IngressRoute for Elasticsearch (similar to Grafana)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: elasticsearch-route
            namespace: "{{ elastic_namespace }}"
            labels:
              app: elasticsearch
          spec:
            entryPoints:
              - web
            routes:
              - match: "PathPrefix(`/elasticsearch`)"
                kind: Rule
                services:
                  - name: elasticsearch-es-http
                    port: 9200
                    scheme: https
                    serversTransport: insecure-transport
                middlewares:
                  - name: elastic-strip-prefix
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    - name: Create IngressRoute for Kibana (similar to Grafana)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: kibana-route
            namespace: "{{ elastic_namespace }}"
            labels:
              app: kibana
          spec:
            entryPoints:
              - web
            routes:
              - match: "PathPrefix(`/kibana`)"
                kind: Rule
                services:
                  - name: kibana  # Using the manual service
                    port: 5601
                    scheme: https
                    serversTransport: insecure-transport
                middlewares:
                  - name: elastic-strip-prefix
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    # Create direct-access services for easier testing
    - name: Create direct access services with TLS passthrough
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "kibana-direct"
            namespace: "{{ elastic_namespace }}"
          spec:
            type: NodePort
            ports:
            - port: 5601
              targetPort: 5601
              nodePort: 30057
              protocol: TCP
              name: https
            selector:
              app: kibana
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    # Add a TraefikService to handle TLS properly
    - name: Create TraefikService for TLS passthrough to Elasticsearch
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: TraefikService
          metadata:
            name: elasticsearch-tls-service
            namespace: "{{ elastic_namespace }}"
          spec:
            weighted:
              services:
                - name: elasticsearch-es-http
                  port: 9200
                  weight: 1
                  scheme: https
                  serversTransport: insecure-transport
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    - name: Create TraefikService for TLS passthrough to Kibana
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: TraefikService
          metadata:
            name: kibana-tls-service
            namespace: "{{ elastic_namespace }}"
          spec:
            weighted:
              services:
                - name: kibana
                  port: 5601
                  weight: 1
                  scheme: https
                  serversTransport: insecure-transport
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    # Create improved IngressRoutes using TraefikServices
    - name: Create improved IngressRoute for Elasticsearch
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: elasticsearch-tls
            namespace: "{{ elastic_namespace }}"
          spec:
            entryPoints:
              - web
            routes:
              - match: "PathPrefix(`/elasticsearch`)"
                kind: Rule
                services:
                  - kind: TraefikService
                    name: elasticsearch-tls-service
                middlewares:
                  - name: elastic-strip-prefix
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    - name: Create improved IngressRoute for Kibana
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: kibana-tls
            namespace: "{{ elastic_namespace }}"
          spec:
            entryPoints:
              - web
            routes:
              - match: "PathPrefix(`/kibana`)"
                kind: Rule
                services:
                  - kind: TraefikService
                    name: kibana-tls-service
                middlewares:
                  - name: elastic-strip-prefix
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    # Check resulting configuration
    - name: Get all IngressRoutes
      shell: |
        echo "=== All IngressRoutes ==="
        kubectl --kubeconfig={{ kubeconfig_path }} get ingressroute -A
      register: all_routes
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      changed_when: false

    - name: Display all routes
      debug:
        msg: "{{ all_routes.stdout_lines }}"

    # Optional: Add direct curl tests to see why routes are not working
    - name: Test curl to services directly
      shell: |
        echo "=== Testing direct access to Elasticsearch ==="
        curl -k -v https://{{ control_plane_ip }}:30092 2>&1 | grep -E "HTTP|elasticsearch|error"
        echo "=== Testing direct access to Kibana ==="
        curl -k -v https://{{ control_plane_ip }}:30056 2>&1 | grep -E "HTTP|kibana|error"
      register: curl_tests
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display curl test results
      debug:
        msg: "{{ curl_tests.stdout_lines }}"

    - name: Display Traefik access information
      debug:
        msg:
          - "ECK ingress configuration has been updated!"
          - "--------------------------------------"
          - "Direct NodePort Access:"
          - "Elasticsearch: https://{{ control_plane_ip }}:30092"
          - "Kibana: https://{{ control_plane_ip }}:30056"
          - "Kibana Direct: https://{{ control_plane_ip }}:30057 (new direct service)"
          - ""
          - "Traefik Ingress Access:"
          - "Elasticsearch: http://{{ control_plane_ip }}/elasticsearch"
          - "Kibana: http://{{ control_plane_ip }}/kibana"
          - ""
          - "IMPORTANT NOTES:"
          - "1. We've changed the ingress approach to match what works for Grafana"
          - "2. Make sure you're using http:// not https:// for ingress URLs"
          - "3. The direct HTTPS NodePort services should always work"
          - "4. If ingress still doesn't work, use the direct services for now"
          - "--------------------------------------"
          - "Debugging options:"
          - "kubectl --kubeconfig={{ kubeconfig_path }} logs -n kube-system -l app.kubernetes.io/name=traefik"