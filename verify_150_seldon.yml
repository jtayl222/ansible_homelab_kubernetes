- name: Verify Seldon Core ML Model Deployment Installation
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: '{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig'
    seldon_namespace: seldon-system
    control_plane_ip: "{{ hostvars[groups['k3s_control_plane'][0]]['ansible_host']
      }}"
    seldon_host: seldon.{{ control_plane_ip }}.nip.io
    seldon_nodeport: 30150
    iris_model_name: iris-model
    test_data_path: '{{ playbook_dir }}/seldon-examples/test-data.json'
  tasks:
    # 1. Verify prerequisites
    - name: Ensure kubeconfig exists
      ansible.builtin.stat:
        path: '{{ kubeconfig_path }}'
      register: kubeconfig_stat

    - name: Fail if kubeconfig doesn't exist
      ansible.builtin.fail:
        msg: Kubeconfig not found at {{ kubeconfig_path }}. Please run install_020_k3s_control_plane.yml
          first.
      when: not kubeconfig_stat.stat.exists

    # 2. Check if Seldon namespace exists
    - name: Check if Seldon namespace exists
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
        get namespace {{ seldon_namespace }} \
        -o name 2>/dev/null || echo "not found"
      register: seldon_ns_check
      become: false
      changed_when: false

    - name: Display Seldon namespace status
      ansible.builtin.debug:
        msg: "Seldon namespace: {{ 'Exists' if 'not found' not in seldon_ns_check.stdout
          else 'Not found - Seldon is not installed' }}"
    - name: Fail if Seldon is not installed
      ansible.builtin.fail:
        msg: Seldon Core namespace not found. Please run install_150_seldon.yml first.
      when: "'not found' in seldon_ns_check.stdout"

    # 3. Verify Seldon Controller Manager is running
    - name: Check Seldon Controller Manager status
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get deployment seldon-controller-manager -o jsonpath='{.status.availableReplicas}'
      register: controller_status
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display Controller Manager status
      ansible.builtin.debug:
        msg: >-
          Seldon Controller Manager:
          {{ 'Healthy (' + controller_status.stdout + ' replicas)'
          if controller_status.rc == 0 and controller_status.stdout | int > 0
          else 'Unhealthy or not found' }}

    # 4. Verify CRDs are installed
    - name: Check if Seldon CRDs are installed
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} \
        get crd seldondeployments.machinelearning.seldon.io -o name 2>/dev/null || echo "not found"
      register: seldon_crd_check
      become: false
      changed_when: false

    - name: Display CRD status
      ansible.builtin.debug:
        msg: "Seldon CRDs: {{ 'Installed' if 'not found' not in seldon_crd_check.stdout
          else 'Not installed' }}"

    # 5. Get and display installed version
    - name: Get Seldon Core version
      ansible.builtin.shell: |
        helm --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} list -o json | \
        jq -r '.[] | select(.name == "seldon-core") | .app_version // .chart'
      register: seldon_version
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display Seldon Core version
      ansible.builtin.debug:
        msg: >-
          Seldon Core version:
          {{ seldon_version.stdout if seldon_version.rc == 0
          and seldon_version.stdout != '' else 'Unknown' }}

    # 6. Check deployed model status (assuming iris-model from install playbook)
    - name: Check for deployed models
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get seldondeployments.machinelearning.seldon.io -o name
      register: deployed_models
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display deployed models
      ansible.builtin.debug:
        msg: "Deployed models: {{ deployed_models.stdout_lines if deployed_models.rc
          == 0 and deployed_models.stdout != '' else 'None found' }}"

    # 7. Check iris model status if it exists
    - name: Check Iris model deployment status
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get seldondeployment {{ iris_model_name }} -o jsonpath='{.status.state}' 2>/dev/null || echo "not found"
      register: iris_model_status
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display Iris model status
      ansible.builtin.debug:
        msg: "Iris model status: {{ iris_model_status.stdout if iris_model_status.rc
          == 0 else 'Not found' }}"

    # 8. Verify model pods are running
    - name: Check model pods
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get pods -l seldon-deployment-id={{ iris_model_name }} \
        -o jsonpath='{.items[*].status.phase}' 2>/dev/null || echo "not found"
      register: model_pods_status
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display model pods status
      ansible.builtin.debug:
        msg: "Model pods status: {{ model_pods_status.stdout if model_pods_status.rc
          == 0 and model_pods_status.stdout != 'not found' else 'No pods found' }}"

    # 9. Verify NodePort service exists
    - name: Check NodePort service
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get service seldon-nodeport -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "not found"
      register: nodeport_service
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display NodePort service status
      ansible.builtin.debug:
        msg: "NodePort service: {{ 'Available on port ' + nodeport_service.stdout if
          nodeport_service.rc == 0 and nodeport_service.stdout != 'not found' else 'Not
          found' }}"

    # 10. Verify IngressRoute exists
    - name: Check IngressRoute
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get ingressroute seldon-ingress -o name 2>/dev/null || echo "not found"
      register: ingress_status
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display IngressRoute status
      ansible.builtin.debug:
        msg: "Seldon IngressRoute: {{ 'Configured' if ingress_status.rc == 0 and 'not
          found' not in ingress_status.stdout else 'Not configured' }}"

    # 11. Verify model-specific IngressRoute exists
    - name: Check model IngressRoute
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get ingressroute seldon-models-ingress -o name 2>/dev/null || echo "not found"
      register: model_ingress_status
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display model IngressRoute status
      ansible.builtin.debug:
        msg: "Model-specific IngressRoute: {{ 'Configured' if model_ingress_status.rc
          == 0 and 'not found' not in model_ingress_status.stdout else 'Not configured'
          }}"

    # 12. Get model service name
    - name: Get Iris model service name
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get services | grep {{ iris_model_name }} | awk '{print $1}'
      register: model_service_name
      become: false
      changed_when: false
      ignore_errors: true
      when: "'not found' not in iris_model_status.stdout"
    - name: Display model service
      ansible.builtin.debug:
        msg: "Model service: {{ model_service_name.stdout if model_service_name is defined
          and model_service_name.stdout is defined and model_service_name.stdout !=
          '' else 'Not found' }}"
      when: model_service_name is defined

    # 13. Create test data file if it doesn't exist
    - name: Create test data file
      ansible.builtin.copy:
        dest: '{{ test_data_path }}'
        content: |
          {"data": {"ndarray": [[5.1, 3.5, 1.4, 0.2]]}}
        mode: '0644'
      become: false
      when: "'not found' not in iris_model_status.stdout"

    # 14. Test model API directly
    - name: Test model API (direct)
      ansible.builtin.shell: |
        echo "Direct API test output:"
        curl -s -X POST \
          "http://{{ control_plane_ip }}:{{ seldon_nodeport }}" \
          "/seldon/{{ seldon_namespace }}/{{ iris_model_name }}/api/v1.0/predictions" \
          -H "Content-Type: application/json" \
          -d @{{ test_data_path }} || echo "API call failed with error code $?"
      register: direct_api_test
      become: false
      changed_when: false
      ignore_errors: true
      when: "'not found' not in iris_model_status.stdout and nodeport_service.stdout
        != 'not found'"
    - name: Display direct API test result
      ansible.builtin.debug:
        msg: "Model API direct test result: {{ direct_api_test.stdout if direct_api_test
          is defined and direct_api_test.stdout is defined else 'Not tested' }}"
      when: direct_api_test is defined

    # 15. Test model API via ingress
    - name: Test model API (ingress)
      ansible.builtin.shell: |
        echo "Ingress API test output:"
        curl -s -X POST \
          "http://{{ seldon_host }}/seldon/{{ seldon_namespace }}" \
          "/{{ iris_model_name }}/api/v1.0/predictions" \
          -H "Content-Type: application/json" \
          -d @{{ test_data_path }} || echo "API call failed with error code $?"
      register: ingress_api_test
      become: false
      changed_when: false
      ignore_errors: true
      when: "'not found' not in iris_model_status.stdout and 'not found' not in ingress_status.stdout"
    - name: Display ingress API test result
      ansible.builtin.debug:
        msg: "Model API ingress test result: {{ ingress_api_test.stdout if ingress_api_test
          is defined and ingress_api_test.stdout is defined else 'Not tested' }}"
      when: ingress_api_test is defined

    # 16. Check storage configuration
    - name: Check if MinIO is configured
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        get secret seldon-minio-secret -o name 2>/dev/null || echo "not found"
      register: minio_secret_check
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display MinIO configuration status
      ansible.builtin.debug:
        msg: "MinIO configuration: {{ 'Configured' if minio_secret_check.rc == 0 and
          'not found' not in minio_secret_check.stdout else 'Not configured' }}"

    # 17. Check if examples directory exists
    - name: Check for examples directory
      ansible.builtin.stat:
        path: '{{ playbook_dir }}/seldon-examples'
      register: examples_dir

    - name: Display examples status
      ansible.builtin.debug:
        msg: "Seldon examples: {{ 'Available in ' + playbook_dir + '/seldon-examples'
          if examples_dir.stat.exists else 'Not available' }}"

    # 18. Verify if test script exists
    - name: Check for test script
      ansible.builtin.stat:
        path: '{{ playbook_dir }}/seldon-examples/test-iris-model.sh'
      register: test_script

    - name: Display test script status
      ansible.builtin.debug:
        msg: "Test script: {{ 'Available at ' + playbook_dir + '/seldon-examples/test-iris-model.sh'
          if test_script.stat.exists else 'Not available' }}"

    # 19. Summary report of verification - using template file to avoid Jinja errors
    - name: Ensure seldon-examples directory exists
      ansible.builtin.file:
        path: '{{ playbook_dir }}/seldon-examples'
        state: directory
        mode: '0755'
      become: false

    - name: Create verification summary report
      ansible.builtin.template:
        src: seldon_verification_summary.j2
        dest: '{{ playbook_dir }}/seldon-examples/verification_report.txt'
        mode: '0644'  # Adding appropriate file permissions
      become: false

    - name: Display verification summary
      ansible.builtin.command: cat "{{ playbook_dir }}/seldon-examples/verification_report.txt"
      register: summary_output
      become: false
      changed_when: false

    - name: Show verification summary
      ansible.builtin.debug:
        msg: '{{ summary_output.stdout_lines }}'

    # Add this diagnostic task
    - name: Get detailed information about Seldon services and endpoints
      ansible.builtin.shell: |
        echo "All services in {{ seldon_namespace }} namespace:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
          get services -o wide

        echo -e "\nAll pods in {{ seldon_namespace }} namespace:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
          get pods -o wide

        echo -e "\nAll endpoints in {{ seldon_namespace }} namespace:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
          get endpoints

        echo -e "\nSeldon deployment description:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        describe seldondeployment iris-model 2>/dev/null || echo "No iris-model deployment found"

        echo -e "\nTraefik IngressRoute description:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        describe ingressroute seldon-ingress 2>/dev/null || echo "No seldon-ingress IngressRoute found"

        # Add check for alternative IngressRoute names
        echo -e "\nListing all IngressRoutes in {{ seldon_namespace }} namespace:"
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
          get ingressroutes
      register: seldon_details
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display diagnostic information
      ansible.builtin.debug:
        msg: '{{ seldon_details.stdout_lines }}'

    # Check all available IngressRoutes
    - name: Check all available IngressRoutes
      ansible.builtin.shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ seldon_namespace }} \
        ßget ingressroutes -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
        2>/dev/null || echo "No IngressRoutes found"
      register: all_ingressroutes
      become: false
      changed_when: false
      ignore_errors: true

    - name: Display available IngressRoutes
      ansible.builtin.debug:
        msg: >-
          Available IngressRoutes in {{ seldon_namespace }}: \
          {{ all_ingressroutes.stdout_lines if all_ingressroutes.stdout_lines | length > 0 else 'None found' }}
