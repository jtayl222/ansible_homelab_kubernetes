---
- name: Verify ECK Ingress Configuration
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    elastic_namespace: "elastic"
    control_plane_ip: "{{ hostvars['NUC8i5BEHS']['ansible_host'] | default('192.168.1.85') }}"

  tasks:
    - name: Verify ServersTransport exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get servertransport insecure-transport -o name
      register: servertransport_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Elasticsearch Middleware exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get middleware elasticsearch-strip-prefix -o name
      register: es_middleware_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana Middleware exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get middleware kibana-strip-prefix -o name
      register: kibana_middleware_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Elasticsearch IngressRoute exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get ingressroute elasticsearch -o name
      register: es_ingressroute_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify Kibana IngressRoute exists
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get ingressroute kibana -o name
      register: kibana_ingressroute_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Verify NodePort services exist
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get svc {{ item }} -o name
      loop:
        - elasticsearch-es-nodeport
        - kibana-kb-nodeport
      register: nodeport_exists
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Test HTTP Elasticsearch ingress connectivity
      shell: |
        curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://{{ control_plane_ip }}/elasticsearch
      register: es_http_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Test HTTP Kibana ingress connectivity
      shell: |
        curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://{{ control_plane_ip }}/kibana
      register: kibana_http_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Test HTTPS Elasticsearch ingress connectivity
      shell: |
        curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 5 https://{{ control_plane_ip }}/elasticsearch
      register: es_https_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Test HTTPS Kibana ingress connectivity
      shell: |
        curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 5 https://{{ control_plane_ip }}/kibana
      register: kibana_https_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false

    - name: Get Elastic password for authentication tests
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} -n {{ elastic_namespace }} get secret elasticsearch-es-elastic-user -o jsonpath='{.data.elastic}' | base64 -d
      register: elastic_password
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      changed_when: false
      no_log: true
      ignore_errors: true

    - name: Test Elasticsearch with authentication
      shell: |
        curl -k -s -o /dev/null -w "%{http_code}" -u "elastic:{{ elastic_password.stdout }}" --connect-timeout 5 https://{{ control_plane_ip }}/elasticsearch
      register: es_auth_access
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      ignore_errors: true
      changed_when: false
      no_log: false
      when: elastic_password.rc == 0

    - name: Display Ingress verification results
      debug:
        msg:
          - "ECK Ingress Verification Results:"
          - "--------------------------------------"
          - "ServersTransport exists: {{ 'Yes' if servertransport_exists.rc == 0 else 'No' }}"
          - "Elasticsearch Middleware exists: {{ 'Yes' if es_middleware_exists.rc == 0 else 'No' }}"
          - "Kibana Middleware exists: {{ 'Yes' if kibana_middleware_exists.rc == 0 else 'No' }}"
          - "Elasticsearch IngressRoute exists: {{ 'Yes' if es_ingressroute_exists.rc == 0 else 'No' }}"
          - "Kibana IngressRoute exists: {{ 'Yes' if kibana_ingressroute_exists.rc == 0 else 'No' }}"
          - "NodePort services exist: {{ 'Yes' if nodeport_exists.results | map(attribute='rc') | list | select('==', 0) | list | length == 2 else 'No' }}"
          - "--------------------------------------"
          - "HTTP Elasticsearch access: {{ es_http_access.stdout if es_http_access.rc == 0 else 'Failed' }}"
          - "HTTP Kibana access: {{ kibana_http_access.stdout if kibana_http_access.rc == 0 else 'Failed' }}"
          - "HTTPS Elasticsearch access: {{ es_https_access.stdout if es_https_access.rc == 0 else 'Failed' }}"
          - "HTTPS Kibana access: {{ kibana_https_access.stdout if kibana_https_access.rc == 0 else 'Failed' }}"
          - "Authenticated Elasticsearch access: {{ es_auth_access.stdout if es_auth_access is defined and es_auth_access.rc == 0 else 'Not tested' }}"
          - "--------------------------------------"
          - "Overall status: {{ 'HEALTHY' if servertransport_exists.rc == 0 and es_middleware_exists.rc == 0 and kibana_middleware_exists.rc == 0 and es_ingressroute_exists.rc == 0 and kibana_ingressroute_exists.rc == 0 and (es_http_access.stdout == '401' or es_https_access.stdout == '401' or (es_auth_access is defined and es_auth_access.stdout == '200')) and (kibana_http_access.stdout in ['200', '302', '303', '307'] or kibana_https_access.stdout in ['200', '302', '303', '307']) else 'ISSUES DETECTED' }}"

    - name: Set verification status
      set_fact:
        ingress_healthy: "{{ servertransport_exists.rc == 0 and es_middleware_exists.rc == 0 and kibana_middleware_exists.rc == 0 and es_ingressroute_exists.rc == 0 and kibana_ingressroute_exists.rc == 0 and (es_http_access.stdout == '401' or es_https_access.stdout == '401' or (es_auth_access is defined and es_auth_access.stdout == '200')) and (kibana_http_access.stdout in ['200', '302', '303', '307'] or kibana_https_access.stdout in ['200', '302', '303', '307']) }}"

    - name: Fail if ingress is not healthy
      fail:
        msg: "ECK Ingress verification failed. See output above for details."
      when: not ingress_healthy