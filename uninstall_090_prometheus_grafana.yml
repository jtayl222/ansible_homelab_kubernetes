- name: Uninstall Prometheus and Grafana Stack
  hosts: k3s_control_plane
  become: true
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    prometheus_namespace: monitoring
    prometheus_release_name: prometheus
  tasks:
    - name: Check if kubeconfig exists
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false

    - name: Fail if kubeconfig doesn't exist
      ansible.builtin.fail:
        msg:
          Kubeconfig file not found at {{ kubeconfig_path }}. Cannot proceed with
          uninstallation.
      when: not kubeconfig_stat.stat.exists
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false

    - name: Handle potential Helm locks
      block:
        - name: Check for Helm secrets that might be locked
          ansible.builtin.shell: |
            HELM_SECRETS=$(kubectl --kubeconfig="{{ kubeconfig_path }}" \
              get secrets -n {{ prometheus_namespace }} -l owner=helm -o name 2>/dev/null || echo "")
            echo "$HELM_SECRETS"
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          register: helm_secrets
          become: false
          changed_when: false
          ignore_errors: true

        - name: Display found Helm secrets
          ansible.builtin.debug:
            msg: "Found Helm secrets: {{ helm_secrets.stdout_lines }}"
          when: helm_secrets.stdout | length > 0

        - name: Create Helm lock cleanup script
          ansible.builtin.copy:
            dest: "{{ playbook_dir }}/fetched_tokens/cleanup_helm_locks.sh"
            mode: "0755"
            content: |
              #!/bin/bash
              set -e
              KUBECONFIG="{{ kubeconfig_path }}"
              NAMESPACE="{{ prometheus_namespace }}"
              RELEASE="{{ prometheus_release_name }}"

              echo "Cleaning up Helm locks for $RELEASE in $NAMESPACE..."

              # Delete specific release secrets if they exist
              kubectl --kubeconfig=$KUBECONFIG \
                delete secret -n $NAMESPACE sh.helm.release.v1.$RELEASE.v1 --ignore-not-found=true

              # Find and delete all release secrets for this release
              for secret in $(kubectl --kubeconfig=$KUBECONFIG \
                get secrets -n $NAMESPACE -l name=$RELEASE,owner=helm -o name 2>/dev/null); do
                  echo "Deleting $secret"
                  kubectl --kubeconfig=$KUBECONFIG \
                    delete -n $NAMESPACE $secret
                done

              echo "Helm lock cleanup completed"
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          become: false

        - name: Run Helm lock cleanup script
          ansible.builtin.command:
            cmd: "{{ playbook_dir }}/fetched_tokens/cleanup_helm_locks.sh"
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          become: false
          register: helm_lock_cleanup
          changed_when: true
          ignore_errors: true

    - name: Check if Prometheus release exists
      ansible.builtin.shell: |
        helm --kubeconfig="{{ kubeconfig_path }}" list -n "{{ prometheus_namespace }}" --filter '{{ prometheus_release_name }}' --short
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      register: existing_prometheus
      changed_when: false
      failed_when: false

    - name: Uninstall Prometheus and Grafana stack with Helm
      when: existing_prometheus.stdout | length > 0
      block:
        - name: Try Helm uninstall
          ansible.builtin.command:
            cmd: "helm --kubeconfig={{ kubeconfig_path }} uninstall {{ prometheus_release_name }} -n {{ prometheus_namespace }}"
          register: helm_uninstall
          changed_when: helm_uninstall.rc == 0 and "uninstalled" in helm_uninstall.stdout

        - name: Display uninstall results
          ansible.builtin.debug:
            msg: "{{ helm_uninstall.stdout_lines }}"
        - name: Force removal of resources if Helm failed
          ansible.builtin.shell: |
            echo "Forcing removal of all Prometheus and Grafana resources..."

            # Remove specific statefulsets first (they often block deletion)
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete statefulset -n {{ prometheus_namespace }} \
              alertmanager-prometheus-kube-prometheus-alertmanager prometheus-prometheus-kube-prometheus-prometheus \
              --ignore-not-found=true --timeout=30s

            # Delete ALL deployments in the namespace with specific labels
            echo "Removing deployments..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete deployment -n {{ prometheus_namespace }} prometheus-grafana prometheus-kube-prometheus-operator prometheus-kube-state-metrics \
              --ignore-not-found=true --force --grace-period=0

            # Delete daemonsets
            echo "Removing daemonsets..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete daemonset -n {{ prometheus_namespace }} prometheus-prometheus-node-exporter --ignore-not-found=true --force --grace-period=0

            # Delete replicasets
            echo "Removing replicasets..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete replicaset -n {{ prometheus_namespace }} -l app.kubernetes.io/instance={{ prometheus_release_name }} \
              --ignore-not-found=true --force --grace-period=0

            # Delete pods with extreme prejudice
            echo "Force removing pods..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" get pods -n {{ prometheus_namespace }} -o name | \
              xargs -r kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete -n {{ prometheus_namespace }} --force --grace-period=0 || true

            # Delete services
            echo "Removing services..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete service -n {{ prometheus_namespace }} \
              prometheus-grafana prometheus-kube-prometheus-alertmanager \
              prometheus-kube-prometheus-operator prometheus-kube-prometheus-prometheus \
              prometheus-kube-state-metrics prometheus-prometheus-node-exporter --ignore-not-found=true

            # Delete configmaps - be comprehensive
            echo "Removing configmaps..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete configmap -n {{ prometheus_namespace }} -l app.kubernetes.io/instance={{ prometheus_release_name }} --ignore-not-found=true

            # Get all prometheus configmaps and delete them
            for CM in $(kubectl --kubeconfig="{{ kubeconfig_path }}" \
              get configmap -n {{ prometheus_namespace }} | grep prometheus- | awk '{print $1}'); do
                echo "Deleting configmap $CM"
                kubectl --kubeconfig="{{ kubeconfig_path }}" \
                  delete configmap -n {{ prometheus_namespace }} "$CM" --ignore-not-found=true
              done

            # Delete secrets
            echo "Removing secrets..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete secret -n {{ prometheus_namespace }} -l app.kubernetes.io/instance={{ prometheus_release_name }} --ignore-not-found=true
            kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete secret -n {{ prometheus_namespace }} -l owner=helm --ignore-not-found=true
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          become: false
          register: force_removal
          changed_when: true
          ignore_errors: true

    - name: Wait for resources to be removed (30s)
      ansible.builtin.pause:
        seconds: 30
      when: existing_prometheus.stdout | length > 0

      # Remove CRDs
    - name: Create CRD cleanup script
      ansible.builtin.copy:
        dest: "{{ playbook_dir }}/fetched_tokens/remove_crds.sh"
        mode: "0755"
        content: |
          #!/bin/bash
          set -e
          KUBECONFIG="{{ kubeconfig_path }}"
          for CRD in alertmanagerconfigs alertmanagers podmonitors probes prometheuses prometheusrules servicemonitors thanosrulers; do
            kubectl --kubeconfig=$KUBECONFIG \
              delete crd ${CRD}.monitoring.coreos.com --ignore-not-found
          done
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: existing_prometheus.stdout | length > 0

    - name: Run CRD cleanup script
      ansible.builtin.command:
        cmd: "{{ playbook_dir }}/fetched_tokens/remove_crds.sh"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: existing_prometheus.stdout | length > 0
      register: crd_removal
      changed_when: true
      ignore_errors: true

    - name: Check if namespace still exists
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get namespace "{{ prometheus_namespace }}" --no-headers --ignore-not-found
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      register: namespace_check
      changed_when: false
      failed_when: false

    - name: Remove namespace if it still exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ prometheus_namespace }}"
        api_version: v1
        kind: Namespace
        state: absent
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: namespace_check.stdout | length > 0

      # Run finalizers removal in case namespace is stuck
    - name: Create finalizer removal script
      ansible.builtin.copy:
        dest: "{{ playbook_dir }}/fetched_tokens/remove_finalizers.sh"
        mode: "0755"
        content: |
          #!/bin/bash
          set -e
          KUBECONFIG="{{ kubeconfig_path }}"
          NAMESPACE="{{ prometheus_namespace }}"

          # Check if namespace exists and is terminating
          if kubectl --kubeconfig=$KUBECONFIG \
            get namespace $NAMESPACE -o json | grep '"phase": "Terminating"' > /dev/null; then
              echo "Removing finalizers from namespace $NAMESPACE"
              kubectl --kubeconfig=$KUBECONFIG \
                get namespace $NAMESPACE -o json | \
                jq '.spec.finalizers = []' | \
                kubectl --kubeconfig=$KUBECONFIG replace --raw "/api/v1/namespaces/$NAMESPACE/finalize" -f -
              echo "Finalizers removed from namespace $NAMESPACE"
          fi
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: namespace_check.stdout | length > 0

    - name: Run finalizer removal script
      ansible.builtin.command:
        cmd: "{{ playbook_dir }}/fetched_tokens/remove_finalizers.sh"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      when: namespace_check.stdout | length > 0
      register: finalizer_removal
      changed_when: true
      ignore_errors: true

    - name: Verify all resources have been removed
      ansible.builtin.shell: |
        echo "Checking for remaining resources..."
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get all -n {{ prometheus_namespace }} \
          -l app.kubernetes.io/instance={{ prometheus_release_name }} --no-headers 2>/dev/null || echo "All resources removed"

        echo "Checking for remaining Helm secrets..."
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get secrets -n {{ prometheus_namespace }} -l owner=helm --no-headers 2>/dev/null || echo "All Helm secrets removed"

        echo "Checking for ConfigMaps..."
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get configmap -n {{ prometheus_namespace }} \
          -l app.kubernetes.io/instance={{ prometheus_release_name }} --no-headers 2>/dev/null || echo "All ConfigMaps removed"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      register: verification_check
      changed_when: false
      ignore_errors: true

    - name: Perform extreme cleanup if resources still remain
      when: >-
        verification_check.stdout is search("Running") or verification_check.stdout is search("ClusterIP")
      block:
        - name: Check if resources still remain
          ansible.builtin.shell: |
            set -o pipefail
            REMAINING=$(kubectl --kubeconfig="{{ kubeconfig_path }}" \
              get all -n {{ prometheus_namespace }} -l app.kubernetes.io/instance={{ prometheus_release_name }} --no-headers 2>/dev/null | wc -l)
            echo $REMAINING
          args:
            executable: /bin/bash
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          become: false
          register: remaining_count
          changed_when: false

        - name: Execute extreme cleanup
          ansible.builtin.shell: |
            set -o pipefail
            echo "Performing extreme cleanup - directly patching resources to remove finalizers..."

            # Get all resources with finalizers
            ALL_RESOURCES=$(kubectl --kubeconfig="{{ kubeconfig_path }}" \
              get all -n {{ prometheus_namespace }} -o json \
                | jq -r '.items[] | select(.metadata.finalizers != null) | .kind + "/" + .metadata.name')

            # Patch each resource to remove finalizers
            for RESOURCE in $ALL_RESOURCES; do
              echo "Removing finalizers from $RESOURCE"
              kubectl --kubeconfig="{{ kubeconfig_path }}" \
                patch -n {{ prometheus_namespace }} $RESOURCE -p '{"metadata":{"finalizers":[]}}' --type=merge || true
            done

            # Force delete pods with extreme prejudice
            echo "Force deleting remaining pods..."
            kubectl --kubeconfig="{{ kubeconfig_path }}" get pods -n {{ prometheus_namespace }} -o name | \
              xargs -r kubectl --kubeconfig="{{ kubeconfig_path }}" \
              delete -n {{ prometheus_namespace }} --force --grace-period=0 || true

            # Apply nuclear option if needed - direct etcd manipulation via the API to remove stuck resources
            echo "Force removing remaining resources via API..."
            for TYPE in configmaps secrets services deployments statefulsets daemonsets replicasets pods; do
              echo "Removing $TYPE..."
              RESOURCES=$(kubectl --kubeconfig="{{ kubeconfig_path }}" \
                get $TYPE -n {{ prometheus_namespace }} -o name | grep "prometheus")
              for RESOURCE in $RESOURCES; do
                kubectl --kubeconfig="{{ kubeconfig_path }}" \
                  delete $RESOURCE -n {{ prometheus_namespace }} --force --grace-period=0 || true
              done
            done
          args:
            executable: /bin/bash
          delegate_to: "{{ groups['ansible_controller'][0] }}"
          become: false
          register: extreme_cleanup
          changed_when: >-
            extreme_cleanup.stdout is search("Removing") or extreme_cleanup.stdout is search("Deleted")
            or extreme_cleanup.stdout is search("Force deleting")
          when: remaining_count.stdout | int > 0

    - name: Extended wait for all resources to terminate (if needed)
      ansible.builtin.pause:
        seconds: 10
      when: >-
        verification_check.stdout is search("Running") or verification_check.stdout is search("ClusterIP")

    - name: Final verification
      ansible.builtin.shell: |
        echo "Final verification of namespace status:"
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get namespace {{ prometheus_namespace }} 2>/dev/null || echo "Namespace completely removed"

        echo "Checking for any remaining prometheus-labeled resources across all namespaces:"
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get all --all-namespaces -l app.kubernetes.io/instance={{ prometheus_release_name }} --no-headers 2>/dev/null || echo "No resources found"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      register: final_verification
      changed_when: false
      ignore_errors: true

    - name: Clean up additional dashboards ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: absent
        api_version: v1
        kind: ConfigMap
        name: "{{ item.metadata.name }}"
        namespace: "{{ prometheus_namespace }}"
      register: configmap_cleanup
      with_items: "{{ dashboard_configmaps.resources | default([]) }}"
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      failed_when:
        - configmap_cleanup.failed is defined
        - configmap_cleanup.failed
        - not (
            configmap_cleanup.msg | default('') is search('not found') or
            configmap_cleanup.msg | default('') is search('NotFound') or
            configmap_cleanup.msg | default('') is search('does not exist')
          )

    - name: Clean up remaining Prometheus services in kube-system
      ansible.builtin.shell: |
        echo "Removing lingering Prometheus services in kube-system..."

        # Find and remove all prometheus-related services in kube-system
        PROMETHEUS_SERVICES=$(kubectl --kubeconfig="{{ kubeconfig_path }}" -n kube-system \
          get services | grep prometheus | awk '{print $1}')

        if [ -n "$PROMETHEUS_SERVICES" ]; then
          echo "Found lingering services:"
          echo "$PROMETHEUS_SERVICES"
          echo "Deleting them..."

          for SVC in $PROMETHEUS_SERVICES; do
            kubectl --kubeconfig="{{ kubeconfig_path }}" -n kube-system \
              delete service "$SVC" --ignore-not-found=true
            echo "Deleted service $SVC"
          done
        else
          echo "No lingering Prometheus services found in kube-system"
        fi
      delegate_to: "{{ groups['ansible_controller'][0] }}"
      become: false
      register: cleanup_kube_system
      changed_when: cleanup_kube_system.stdout is search("Deleted service")
      ignore_errors: true

    - name: Show kube-system cleanup results
      ansible.builtin.debug:
        msg: "{{ cleanup_kube_system.stdout_lines }}"

    - name: Show final status
      ansible.builtin.debug:
        msg: "{{ final_verification.stdout_lines }}"

    - name: Show remaining resources
      ansible.builtin.debug:
        msg: "{{ verification_check.stdout_lines }}"

    - name: Display uninstallation results
      ansible.builtin.debug:
        msg:
          - =====================================================================
          - " Prometheus and Grafana Stack Uninstallation Results "
          - =====================================================================
          - "{% if existing_prometheus.stdout | length > 0 %}Prometheus and Grafana have
            been uninstalled.{% else %}Prometheus and Grafana were not found to be installed.{%
            endif %}"
          - "CRDs: {% if crd_removal is defined and crd_removal.rc is defined %}Removed{%
            else %}Not processed{% endif %}"
          - "Namespace: {% if namespace_check.stdout | length == 0 %}Not found or removed{%
            else %}May still exist, check manually{% endif %}"
          - =====================================================================
