---
- name: Ensure required packages are installed
  apt:
    pkg:
      - curl
      - wget
      - gpg
      - software-properties-common
      - apt-transport-https
    state: present
    update_cache: yes

- name: Check if k3s is already installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Install first control plane node
  shell: |
    curl -sfL https://get.k3s.io | \
    INSTALL_K3S_EXEC="server --cluster-init" \
    INSTALL_K3S_VERSION="{{ k3s_version | default('v1.28.5+k3s1') }}" \
    sh -
  when: 
    - not k3s_binary.stat.exists
    - inventory_hostname == groups['k3s_control_plane'][0]
  environment:
    K3S_TOKEN: "{{ k3s_cluster_token }}"
  register: first_node_install
  failed_when: false

- name: Wait for K3s configuration to be created
  ansible.builtin.wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    timeout: 300
    delay: 10
  when: inventory_hostname == groups['k3s_control_plane'][0]

- name: Collect node token from first control plane node
  block:
    - name: Fetch k3s cluster token
      slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: k3s_token_file
      run_once: true
      delegate_to: "{{ groups['k3s_control_plane'][0] }}"

    - name: Set k3s cluster token fact
      set_fact:
        k3s_cluster_token: "{{ k3s_token_file['content'] | b64decode | trim }}"
      run_once: true
  when: inventory_hostname == groups['k3s_control_plane'][0]

- name: Install subsequent control plane nodes
  shell: |
    set -x
    curl -sfL https://get.k3s.io | \
    INSTALL_K3S_EXEC="server --server https://{{ k3s_control_plane_endpoint }}:6443 --token {{ k3s_cluster_token }}" \
    INSTALL_K3S_VERSION="{{ k3s_version | default('v1.28.5+k3s1') }}" \
    sh -s - --debug
  when: 
    - not k3s_binary.stat.exists
    - inventory_hostname != groups['k3s_control_plane'][0]
  register: subsequent_node_install
  failed_when: false
  environment:
    K3S_TOKEN: "{{ k3s_cluster_token }}"

- name: Wait for K3s configuration on subsequent nodes
  ansible.builtin.wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    timeout: 300
    delay: 10
  when: inventory_hostname != groups['k3s_control_plane'][0]

- name: Debug K3s configuration file check
  block:
    - name: Check if k3s config exists
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: k3s_config_file

    - name: Display K3s config file status
      debug:
        msg: 
          - "K3s Config File Exists: {{ k3s_config_file.stat.exists }}"
          - "Installation Output: {{ subsequent_node_install | default('No output') }}"

- name: Create kubectl config directory
  file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    mode: '0755'

- name: Copy k3s config to user's kube directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_user_dir }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
  register: kube_config_copy
  failed_when: false

- name: Detailed debug for config copy
  debug:
    var: kube_config_copy
  when: kube_config_copy is defined

- name: Fallback config copy method
  block:
    - name: Manually read k3s config
      ansible.builtin.command: cat /etc/rancher/k3s/k3s.yaml
      register: k3s_config_content
      failed_when: false

    - name: Manual config file creation
      ansible.builtin.copy:
        content: "{{ k3s_config_content.stdout }}"
        dest: "{{ ansible_user_dir }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      when: k3s_config_content.stdout is defined
  when: kube_config_copy is failed

- name: Set cluster-admin ClusterRoleBinding
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: cluster-admin-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: User
        name: "{{ ansible_user }}"
  when: inventory_hostname == groups['k3s_control_plane'][0]
