- name: Deploy NFS provisioner to Kubernetes cluster
  hosts: k3s_control_plane
  become: true # Add become: true to run with sudo privileges
  gather_facts: true
  vars:
    nfs_server: 192.168.1.100 # Your utility node IP
    nfs_path: /srv/nfs/kubernetes
    storage_class_name: nfs-client
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
  tasks:
    - name: Create directory for kubeconfig
      ansible.builtin.file:
        path: "{{ playbook_dir }}/fetched_tokens"
        state: directory
        mode: "0700"
      delegate_to: "{{ groups['utility'][0] }}"
      become: false
      when: inventory_hostname == groups['k3s_control_plane'][0]

      # Use become: true to read the protected k3s.yaml file
    - name: Fetch kubeconfig from control plane node
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_path }}"
        flat: true
        # Note: This task inherits the become: true from the play level

    - name: Update kubeconfig to use cluster IP
      ansible.builtin.replace:
        path: "{{ kubeconfig_path }}"
        regexp: https://127.0.0.1:6443
        replace: https://{{ ansible_host }}:6443
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

    - name: Fix permissions on kubeconfig
      ansible.builtin.file:
        path: "{{ kubeconfig_path }}"
        mode: "0600"
      delegate_to: "{{ groups['utility'][0] }}"
      become: false

- name: Deploy NFS CSI provisioner in Kubernetes
  hosts: utility
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    nfs_server: "{{ hostvars[groups['nfs_server'][0]]['ansible_host'] }}"
    nfs_path: /srv/nfs/kubernetes
  tasks:
    # Check if StorageClass already exists
    - name: Check if NFS StorageClass already exists
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          get sc nfs-client -o name 2>/dev/null || echo "not_found"
      register: nfs_sc
      become: false
      changed_when: false

      # Delete existing StorageClass if parameters need to change
    - name: Delete existing StorageClass if found
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" \
          delete sc nfs-client
      when: nfs_sc.stdout != "not_found"
      become: false
      register: sc_deleted
      changed_when: sc_deleted.rc == 0

    - name: Create namespace for NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: nfs-provisioner
      become: false

    - name: Create ServiceAccount for NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: nfs-provisioner
            namespace: nfs-provisioner
      become: false

    - name: Create ClusterRole for NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: nfs-provisioner-runner
          rules:
            - apiGroups: [""]
              resources: [persistentvolumes]
              verbs: [get, list, watch, create, delete]
            - apiGroups: [""]
              resources: [persistentvolumeclaims]
              verbs: [get, list, watch, update]
            - apiGroups: [storage.k8s.io]
              resources: [storageclasses]
              verbs: [get, list, watch]
            - apiGroups: [""]
              resources: [events]
              verbs: [create, update, patch]
      become: false

    - name: Create ClusterRoleBinding for NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: nfs-provisioner-runner
          subjects:
            - kind: ServiceAccount
              name: nfs-provisioner
              namespace: nfs-provisioner
          roleRef:
            kind: ClusterRole
            name: nfs-provisioner-runner
            apiGroup: rbac.authorization.k8s.io
      become: false

    - name: Create Role for leader election
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: leader-locking-nfs-provisioner
            namespace: nfs-provisioner
          rules:
            - apiGroups: [""]
              resources: [endpoints]
              verbs: [get, list, watch, create, update, patch]
      become: false

    - name: Create RoleBinding for leader election
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: leader-locking-nfs-provisioner
            namespace: nfs-provisioner
          subjects:
            - kind: ServiceAccount
              name: nfs-provisioner
              namespace: nfs-provisioner
          roleRef:
            kind: Role
            name: leader-locking-nfs-provisioner
            apiGroup: rbac.authorization.k8s.io
      become: false

    - name: Deploy NFS provisioner
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nfs-client-provisioner
            namespace: nfs-provisioner
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nfs-client-provisioner
            strategy:
              type: Recreate
            template:
              metadata:
                labels:
                  app: nfs-client-provisioner
              spec:
                serviceAccountName: nfs-provisioner
                containers:
                  - name: nfs-client-provisioner
                    image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
                    volumeMounts:
                      - name: nfs-client-root
                        mountPath: /persistentvolumes
                    env:
                      - name: PROVISIONER_NAME
                        value: cluster.local/nfs-client-provisioner
                      - name: NFS_SERVER
                        value: "{{ nfs_server }}"
                      - name: NFS_PATH
                        value: "{{ nfs_path }}"
                volumes:
                  - name: nfs-client-root
                    nfs:
                      server: "{{ nfs_server }}"
                      path: "{{ nfs_path }}"
      become: false

    - name: Create StorageClass for NFS
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: nfs-client
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: cluster.local/nfs-client-provisioner
          parameters:
            archiveOnDelete: "false"
      become: false

    - name: Wait for NFS provisioner deployment to be ready
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" -n nfs-provisioner rollout status deployment/nfs-client-provisioner --timeout=120s
      register: rollout_result
      failed_when: rollout_result.rc != 0
      changed_when: false
      become: false

    - name: Create test PVC to verify NFS storage class works
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: nfs-test-claim
            namespace: nfs-provisioner
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 1Mi
            storageClassName: nfs-client
      become: false

    - name: Wait for PVC to bind
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ kubeconfig_path }}" -n nfs-provisioner \
          get pvc nfs-test-claim -o jsonpath='{.status.phase}' 2>/dev/null || echo "Pending"
      register: pvc_status
      until: pvc_status.stdout == "Bound"
      retries: 10
      delay: 5
      become: false
      changed_when: false

    - name: Display NFS provisioning status
      ansible.builtin.debug:
        msg:
          - NFS provisioner deployed successfully
          - "Test PVC status: {{ pvc_status.stdout }}"
          - NFS default StorageClass created
