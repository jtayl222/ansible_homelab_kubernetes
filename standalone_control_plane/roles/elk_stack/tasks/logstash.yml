---
# roles/elk_stack/tasks/logstash.yml
- name: Setup Logstash certificates
  include_tasks: logstash_certificates.yml

- name: Template Logstash values file
  template:
    src: logstash-values.yaml.j2
    dest: "{{ playbook_dir }}/fetched_tokens/logstash-values.yaml"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create fixed Elasticsearch password file if it doesn't exist
  copy:
    content: "{{ elastic_password }}"
    dest: "{{ playbook_dir }}/secrets/elastic_password"
    mode: '0600'
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  when: elastic_password is defined and elastic_password != ""

- name: Deploy Logstash with Helm
  kubernetes.core.helm:
    name: "{{ logstash_release_name }}"
    chart_ref: elastic/logstash
    release_namespace: "{{ elk_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    values_files:
      - "{{ playbook_dir }}/fetched_tokens/logstash-values.yaml"
    wait: true
    wait_timeout: "300s"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  register: logstash_deployment

- name: Wait for Logstash to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ elk_namespace }}"
    label_selectors:
      - app=logstash-logstash
    kubeconfig: "{{ kubeconfig_path }}"
  register: logstash_pods
  until: logstash_pods.resources is defined and logstash_pods.resources | length > 0 and logstash_pods.resources[0].status.phase == 'Running'
  retries: 30
  delay: 10
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create Logstash configuration ConfigMap
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: logstash-pipelines
        namespace: "{{ elk_namespace }}"
      data:
        logstash.conf: |
          input {
            beats {
              port => 5044
            }
            http {
              port => 8080
            }
          }
          filter {
            if [type] == "container" {
              mutate {
                add_field => {
                  "container_name" => "%{[kubernetes][container][name]}"
                  "namespace" => "%{[kubernetes][namespace]}"
                  "pod" => "%{[kubernetes][pod][name]}"
                }
              }
            }
          }
          output {
            elasticsearch {
              hosts => ["https://{{ elasticsearch_cluster_name }}-master:9200"]
              user => "kibana_system"  # Use kibana_system user as we know it's configured
              password => "{{ elastic_password }}"
              ssl => true
              ssl_certificate_verification => false
              index => "logstash-%{+YYYY.MM.dd}"
            }
          }
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  when: create_logstash_configmap | bool

- name: Create Logstash Service for external access
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: logstash-beats
        namespace: "{{ elk_namespace }}"
      spec:
        selector:
          app: "{{ logstash_release_name }}"
        ports:
          - name: beats
            port: 5044
            protocol: TCP
            targetPort: 5044
          - name: http
            port: 8080
            protocol: TCP
            targetPort: 8080
        type: ClusterIP
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  when: create_logstash_configmap | bool