---
# Generate certificates for Elasticsearch and Kibana
- name: Ensure openssl is installed
  package:
    name: openssl
    state: present
  delegate_to: "{{ groups['utility'][0] }}"
  become: true

- name: Create directory for certificates
  file:
    path: "{{ playbook_dir }}/fetched_tokens/es-certs"
    state: directory
    mode: '0755'
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate CA key
  shell: |
    openssl genrsa -out {{ playbook_dir }}/fetched_tokens/es-certs/ca.key 2048
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/ca.key"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate CA certificate
  shell: |
    openssl req -new -x509 -key {{ playbook_dir }}/fetched_tokens/es-certs/ca.key \
      -out {{ playbook_dir }}/fetched_tokens/es-certs/ca.crt \
      -days 3650 -subj "/CN=ELK-CA/O=Elastic/C=US"
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/ca.crt"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate Elasticsearch key
  shell: |
    openssl genrsa -out {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.key 2048
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.key"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create Elasticsearch CSR configuration file
  copy:
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = {{ elasticsearch_cluster_name }}-master
      DNS.2 = {{ elasticsearch_cluster_name }}-master-headless
      DNS.3 = *.{{ elasticsearch_cluster_name }}-master-headless
      DNS.4 = *.{{ elasticsearch_cluster_name }}-master
      DNS.5 = localhost
    dest: "{{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch-csr.conf"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate Elasticsearch CSR
  shell: |
    openssl req -new -key {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.key \
      -out {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.csr \
      -config {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch-csr.conf \
      -subj "/CN=elasticsearch/O=Elastic/C=US"
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.csr"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Sign Elasticsearch certificate with CA
  shell: |
    openssl x509 -req -in {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.csr \
      -CA {{ playbook_dir }}/fetched_tokens/es-certs/ca.crt \
      -CAkey {{ playbook_dir }}/fetched_tokens/es-certs/ca.key \
      -CAcreateserial \
      -out {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.crt \
      -days 3650 -extensions v3_req -extfile {{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch-csr.conf
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/elasticsearch.crt"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate Kibana key
  shell: |
    openssl genrsa -out {{ playbook_dir }}/fetched_tokens/es-certs/kibana.key 2048
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/kibana.key"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create Kibana CSR configuration file
  copy:
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = {{ kibana_release_name }}-kibana
      DNS.2 = localhost
    dest: "{{ playbook_dir }}/fetched_tokens/es-certs/kibana-csr.conf"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Generate Kibana CSR
  shell: |
    openssl req -new -key {{ playbook_dir }}/fetched_tokens/es-certs/kibana.key \
      -out {{ playbook_dir }}/fetched_tokens/es-certs/kibana.csr \
      -config {{ playbook_dir }}/fetched_tokens/es-certs/kibana-csr.conf \
      -subj "/CN=kibana/O=Elastic/C=US"
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/kibana.csr"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Sign Kibana certificate with CA
  shell: |
    openssl x509 -req -in {{ playbook_dir }}/fetched_tokens/es-certs/kibana.csr \
      -CA {{ playbook_dir }}/fetched_tokens/es-certs/ca.crt \
      -CAkey {{ playbook_dir }}/fetched_tokens/es-certs/ca.key \
      -CAcreateserial \
      -out {{ playbook_dir }}/fetched_tokens/es-certs/kibana.crt \
      -days 3650 -extensions v3_req -extfile {{ playbook_dir }}/fetched_tokens/es-certs/kibana-csr.conf
  args:
    creates: "{{ playbook_dir }}/fetched_tokens/es-certs/kibana.crt"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create Elasticsearch certificates secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: elasticsearch-certificates
        namespace: "{{ elk_namespace }}"
      type: Opaque
      data:
        ca.crt: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/ca.crt') | b64encode }}"
        elasticsearch.crt: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/elasticsearch.crt') | b64encode }}"
        elasticsearch.key: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/elasticsearch.key') | b64encode }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create Kibana certificates secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: kibana-certificates
        namespace: "{{ elk_namespace }}"
      type: Opaque
      data:
        ca.crt: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/ca.crt') | b64encode }}"
        kibana.crt: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/kibana.crt') | b64encode }}"
        kibana.key: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/kibana.key') | b64encode }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

# Add this to your certificates.yml task file
- name: Create Logstash certificates secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: logstash-certificates
        namespace: "{{ elk_namespace }}"
      type: Opaque
      data:
        ca.crt: "{{ lookup('file', playbook_dir + '/fetched_tokens/es-certs/ca.crt') | b64encode }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false