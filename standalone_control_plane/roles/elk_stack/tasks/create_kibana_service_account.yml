---
# Create a service account for Kibana
- name: Template Service Account creation script
  template:
    src: create-kibana-token.sh.j2
    dest: "{{ playbook_dir }}/fetched_tokens/create-kibana-token.sh"
    mode: '0755'
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Create service account token for Kibana
  shell: |
    # Wait for Elasticsearch to be ready
    kubectl --kubeconfig={{ kubeconfig_path }} wait --for=condition=ready pod/{{ elasticsearch_cluster_name }}-master-0 -n {{ elk_namespace }} --timeout=300s
    
    # Create a one-time job from the cronjob
    kubectl --kubeconfig={{ kubeconfig_path }} create job kibana-create-sa \
      --from=cronjob/elasticsearch-client-util \
      -n {{ elk_namespace }}
    
    # Wait for the job pod to be running
    sleep 10
    JOB_POD=$(kubectl --kubeconfig={{ kubeconfig_path }} get pods -n {{ elk_namespace }} -l job-name=kibana-create-sa -o jsonpath='{.items[0].metadata.name}')
    
    # Copy the script to the pod
    kubectl --kubeconfig={{ kubeconfig_path }} cp {{ playbook_dir }}/fetched_tokens/create-kibana-token.sh {{ elk_namespace }}/$JOB_POD:/tmp/create-token.sh
    
    # Execute the script in the pod
    kubectl --kubeconfig={{ kubeconfig_path }} exec -n {{ elk_namespace }} $JOB_POD -- /bin/sh -c "chmod +x /tmp/create-token.sh && /tmp/create-token.sh"
    
    # Delete the job
    kubectl --kubeconfig={{ kubeconfig_path }} delete job kibana-create-sa -n {{ elk_namespace }}
  register: create_token_result
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  changed_when: "'created' in create_token_result.stdout"