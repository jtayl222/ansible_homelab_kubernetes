---
# roles/elk_stack/tasks/elasticsearch.yml
- name: Template Elasticsearch values file
  template:
    src: elasticsearch-values.yaml.j2
    dest: "{{ playbook_dir }}/fetched_tokens/elasticsearch-values.yaml"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Deploy Elasticsearch with Helm
  kubernetes.core.helm:
    name: "{{ elasticsearch_release_name }}"
    chart_ref: elastic/elasticsearch
    release_namespace: "{{ elk_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    values_files:
      - "{{ playbook_dir }}/fetched_tokens/elasticsearch-values.yaml"
    wait: true
    wait_timeout: "600s"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  register: elasticsearch_deployment

- name: Wait for Elasticsearch to be ready
  kubernetes.core.k8s_info:
    kind: StatefulSet
    name: "{{ elasticsearch_cluster_name }}-master"  # Use cluster_name instead of release_name
    namespace: "{{ elk_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
  register: es_status
  until: 
    - es_status.resources is defined 
    - es_status.resources | length > 0 
    - es_status.resources[0].status.readyReplicas is defined 
    - es_status.resources[0].status.readyReplicas == es_status.resources[0].status.replicas
  retries: 30
  delay: 10
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Get Elasticsearch password if not specified
  kubernetes.core.k8s_exec:
    namespace: "{{ elk_namespace }}"
    pod: "{{ elasticsearch_cluster_name }}-master-0"  # Use cluster_name instead of release_name
    command: bash -c "cat /usr/share/elasticsearch/config/elasticsearch.keystore | grep -A1 bootstrap.password || echo 'No password found'"
    kubeconfig: "{{ kubeconfig_path }}"
  register: es_password_output
  when: elastic_password is not defined or elastic_password == ""
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  ignore_errors: true
  no_log: true

- name: Set Elasticsearch password from retrieval if needed
  set_fact:
    elastic_password: "{{ es_password_output.stdout | regex_search('bootstrap\\.password\\s+(.+)', '\\1') | default(elastic_default_password, true) }}"
  when: elastic_password is not defined or elastic_password == ""
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  no_log: true