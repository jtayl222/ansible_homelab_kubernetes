---
# Direct Kubernetes manifest approach for Kibana with simplified configuration
- name: Check if existing Kibana resources need to be removed
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} get deployment kibana -n {{ elk_namespace }} 2>/dev/null || echo "Not found"
  register: kibana_check
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  changed_when: false

- name: Remove existing Kibana resources if found
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} delete deployment kibana -n {{ elk_namespace }} --ignore-not-found
    kubectl --kubeconfig={{ kubeconfig_path }} delete configmap kibana-config -n {{ elk_namespace }} --ignore-not-found
    kubectl --kubeconfig={{ kubeconfig_path }} delete service kibana -n {{ elk_namespace }} --ignore-not-found
    kubectl --kubeconfig={{ kubeconfig_path }} delete ingressroute kibana -n {{ elk_namespace }} --ignore-not-found
  when: kibana_check.stdout != "Not found"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Wait for previous resources to be removed
  pause:
    seconds: 10

- name: Setup Kibana certificates
  include_tasks: kibana_certificates.yml

- name: Apply Kibana user setup job
  kubernetes.core.k8s:
    state: present
    src: "{{ playbook_dir }}/fetched_tokens/setup-kibana-user.yaml"
    kubeconfig: "{{ kubeconfig_path }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false

- name: Wait for user setup job to complete
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} wait --for=condition=complete job/setup-kibana-user -n {{ elk_namespace }} --timeout=60s
  register: job_complete
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  retries: 10
  delay: 10
  until: job_complete.rc == 0
  failed_when: false
  changed_when: false

- name: Deploy Kibana with simplified configuration
  kubernetes.core.k8s:
    state: present
    template: "{{ playbook_dir }}/roles/elk_stack/templates/kibana-simple.yaml.j2"
    kubeconfig: "{{ kubeconfig_path }}"
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  register: kibana_deployment

- name: Wait for Kibana to be ready
  shell: |
    kubectl --kubeconfig={{ kubeconfig_path }} wait --for=condition=available deployment/kibana -n {{ elk_namespace }} --timeout=300s
  register: kibana_ready
  delegate_to: "{{ groups['utility'][0] }}"
  become: false
  retries: 10
  delay: 15
  until: kibana_ready.rc == 0
  failed_when: false