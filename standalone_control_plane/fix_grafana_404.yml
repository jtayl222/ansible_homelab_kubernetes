---
- name: Fix Grafana 404 with Traefik Ingress
  hosts: k3s_control_plane
  become: true
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    grafana_namespace: monitoring
    grafana_release_name: grafana
    traefik_namespace: kube-system
  
  tasks:
    - name: Ensure kubeconfig is accessible
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat
      delegate_to: localhost
      become: false
    
    - name: Fail if kubeconfig doesn't exist
      fail:
        msg: "Kubeconfig not found at {{ kubeconfig_path }}"
      when: not kubeconfig_stat.stat.exists
      delegate_to: localhost
      become: false
      
    # First, create middleware for subpath handling
    - name: Create Traefik middleware for Grafana subpath
      copy:
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-middleware.yaml"
        content: |
          apiVersion: traefik.containo.us/v1alpha1
          kind: Middleware
          metadata:
            name: strip-grafana-prefix
            namespace: {{ traefik_namespace }}
          spec:
            stripPrefix:
              prefixes:
                - /grafana
              forceSlash: true
          ---
          apiVersion: traefik.containo.us/v1alpha1
          kind: Middleware
          metadata:
            name: grafana-redirect-regex
            namespace: {{ traefik_namespace }}
          spec:
            redirectRegex:
              regex: ^(https?://[^/]+/grafana)$$
              replacement: $${1}/
              permanent: true
      delegate_to: localhost
      become: false
      
    - name: Apply Traefik middleware
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} apply -f {{ playbook_dir }}/fetched_tokens/grafana-middleware.yaml
      delegate_to: localhost
      become: false
      
    # Create updated IngressRoute
    - name: Create fixed IngressRoute for Grafana
      copy:
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-ingressroute-fixed.yaml"
        content: |
          apiVersion: traefik.containo.us/v1alpha1
          kind: IngressRoute
          metadata:
            name: grafana-ingressroute
            namespace: {{ grafana_namespace }}
          spec:
            entryPoints:
              - web
            routes:
              - match: Host(`grafana.{{ ansible_host }}.nip.io`)
                kind: Rule
                services:
                  - name: {{ grafana_release_name }}
                    port: 80
              - match: PathPrefix(`/grafana`) || PathPrefix(`/grafana/`)
                kind: Rule
                middlewares:
                  - name: strip-grafana-prefix
                services:
                  - name: {{ grafana_release_name }}
                    port: 80
      delegate_to: localhost
      become: false
      
    - name: Apply fixed IngressRoute
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} apply -f {{ playbook_dir }}/fetched_tokens/grafana-ingressroute-fixed.yaml
      delegate_to: localhost
      become: false
      
    # Update Grafana ConfigMap with proper subpath configuration
    - name: Create Grafana ConfigMap for subpath configuration
      copy:
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-subpath-config.yaml"
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ grafana_release_name }}-subpath-config
            namespace: {{ grafana_namespace }}
          data:
            grafana.ini: |
              [server]
              domain = {{ ansible_host }}
              root_url = %(protocol)s://%(domain)s/grafana/
              serve_from_sub_path = true
      delegate_to: localhost
      become: false
      
    - name: Apply Grafana subpath ConfigMap
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} apply -f {{ playbook_dir }}/fetched_tokens/grafana-subpath-config.yaml
      delegate_to: localhost
      become: false
    
    # FIXED: Patch Grafana deployment to use the ConfigMap
    - name: Read deployment patch content
      slurp:
        src: "{{ playbook_dir }}/fetched_tokens/grafana-deployment-patch.yaml"
      register: patch_content
      delegate_to: localhost
      become: false
      
    - name: Apply patch to Grafana deployment
      command: 
        cmd: kubectl --kubeconfig={{ kubeconfig_path }} patch deployment {{ grafana_release_name }} -n {{ grafana_namespace }} --patch '{{ patch_content.content | b64decode }}'
      delegate_to: localhost
      become: false
      
    # Get Traefik service details for access info
    - name: Get Traefik service nodePort
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} get svc -n {{ traefik_namespace }} traefik 
        -o jsonpath='{.spec.ports[?(@.name=="web")].nodePort}'
      register: traefik_port
      delegate_to: localhost
      become: false
      
    # Get Grafana admin password for display
    - name: Get Grafana admin password
      shell: >
        kubectl --kubeconfig={{ kubeconfig_path }} get secret -n {{ grafana_namespace }} {{ grafana_release_name }} 
        -o jsonpath="{.data.admin-password}" | base64 --decode
      register: grafana_password
      changed_when: false
      no_log: true
      delegate_to: localhost
      become: false
      
    - name: Display Grafana access details
      debug:
        msg:
          - "Grafana configuration fixed!"
          - "---------------------------------------------" 
          - "Access Grafana at:"
          - "- Path-based URL: http://{{ ansible_host }}:{{ traefik_port.stdout }}/grafana/"
          - "- Host-based URL: http://grafana.{{ ansible_host }}.nip.io:{{ traefik_port.stdout }}"
          - "Username: admin"
          - "Password: {{ grafana_password.stdout }}"
          - "---------------------------------------------"
      delegate_to: localhost
      become: false
      
    - name: Wait for Grafana to restart
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} rollout status deployment {{ grafana_release_name }} -n {{ grafana_namespace }}
      delegate_to: localhost
      become: false