---
- name: Fix Grafana Redirect with Direct ConfigMap
  hosts: k3s_control_plane
  become: true
  gather_facts: true
  vars:
    kubeconfig_path: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    grafana_namespace: monitoring
    grafana_release_name: grafana
    traefik_namespace: kube-system
    node_ip: "192.168.1.85" 
    traefik_port: "31722"  # Using the known port directly
  
  tasks:
    - name: Create directory for manifests
      file:
        path: "{{ playbook_dir }}/fetched_tokens"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: false
    
    # Step 1: Create extremely simple Traefik configuration
    - name: Create basic Traefik IngressRoute without middleware
      copy:
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-basic-route.yaml"
        content: |
          apiVersion: traefik.containo.us/v1alpha1
          kind: IngressRoute
          metadata:
            name: grafana-basic-route
            namespace: {{ grafana_namespace }}
          spec:
            entryPoints:
              - web
            routes:
              - match: PathPrefix(`/grafana`) || PathPrefix(`/grafana/`)
                kind: Rule
                services:
                  - name: {{ grafana_release_name }}
                    port: 80
      delegate_to: localhost
      become: false
      
    - name: Apply basic IngressRoute
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} apply -f {{ playbook_dir }}/fetched_tokens/grafana-basic-route.yaml
      delegate_to: localhost
      become: false
    
    # Step 2: Create direct grafana.ini ConfigMap
    - name: Create Grafana config ConfigMap
      copy:
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-config-cm.yaml"
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-ini-config
            namespace: {{ grafana_namespace }}
          data:
            grafana.ini: |
              [server]
              root_url = http://{{ node_ip }}:{{ traefik_port }}/grafana
              serve_from_sub_path = true
      delegate_to: localhost
      become: false
    
    - name: Apply Grafana config ConfigMap
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} apply -f {{ playbook_dir }}/fetched_tokens/grafana-config-cm.yaml
      delegate_to: localhost
      become: false
    
    # Step 3: Extract current Grafana Deployment and modify to use new ConfigMap
    - name: Get current Grafana Deployment
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} get deployment {{ grafana_release_name }} -n {{ grafana_namespace }} -o yaml
      register: grafana_deploy
      delegate_to: localhost
      become: false
    
    # Step 4: Save current deployment for backup
    - name: Save current deployment as backup
      copy:
        content: "{{ grafana_deploy.stdout }}"
        dest: "{{ playbook_dir }}/fetched_tokens/grafana-deploy-backup.yaml"
      delegate_to: localhost
      become: false
    
    # Step 5: Create a new deployment with CM added
    - name: Apply patch to Grafana deployment for config volume
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} patch deployment {{ grafana_release_name }} -n {{ grafana_namespace }} --type=json -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/volumes/-",
            "value": {
              "name": "grafana-ini-config",
              "configMap": {
                "name": "grafana-ini-config"
              }
            }
          }
        ]'
      delegate_to: localhost
      become: false
      ignore_errors: true
    
    # Step 6: Add mount to container
    - name: Apply patch to Grafana deployment for config mount
      shell: |
        kubectl --kubeconfig={{ kubeconfig_path }} patch deployment {{ grafana_release_name }} -n {{ grafana_namespace }} --type=json -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/volumeMounts/-",
            "value": {
              "name": "grafana-ini-config",
              "mountPath": "/etc/grafana/grafana.ini",
              "subPath": "grafana.ini"
            }
          }
        ]'
      delegate_to: localhost
      become: false
      ignore_errors: true
      
    # Step 7: Restart the deployment to pick up changes
    - name: Restart Grafana deployment
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} rollout restart deployment {{ grafana_release_name }} -n {{ grafana_namespace }}
      delegate_to: localhost
      become: false
    
    - name: Wait for deployment to be ready
      command: >
        kubectl --kubeconfig={{ kubeconfig_path }} rollout status deployment {{ grafana_release_name }} -n {{ grafana_namespace }}
      delegate_to: localhost
      become: false
      
    # Step 8: Create a simple service and ingress if the original is too complex
    - name: Create simplified test script
      copy:
        dest: "{{ playbook_dir }}/scripts/wait_and_test_grafana.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          # Wait for Grafana to be ready after configuration changes
          
          NODE_IP="{{ node_ip }}"
          PORT="{{ traefik_port }}"
          KUBECONFIG="{{ kubeconfig_path }}"
          
          echo "Waiting 30 seconds for Grafana to apply configuration changes..."
          sleep 30
          
          echo
          echo "Testing Grafana access at http://$NODE_IP:$PORT/grafana/"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://$NODE_IP:$PORT/grafana/")
          echo "HTTP Status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Success! Grafana is accessible"
          else
            echo "❌ Grafana returned HTTP $HTTP_CODE"
            echo
            echo "Checking Grafana logs for errors:"
            kubectl --kubeconfig=$KUBECONFIG logs -n monitoring deployment/grafana --tail=20
          fi
      delegate_to: localhost
      become: false
    
    - name: Display next steps
      debug:
        msg:
          - "Configuration changes have been applied!"
          - "------------------------------------------------------"
          - "Wait 30 seconds for changes to take effect, then run:"
          - "./scripts/wait_and_test_grafana.sh"
          - "------------------------------------------------------"
          - "To access Grafana directly:"
          - "http://{{ node_ip }}:{{ traefik_port }}/grafana/"
      delegate_to: localhost
      become: false