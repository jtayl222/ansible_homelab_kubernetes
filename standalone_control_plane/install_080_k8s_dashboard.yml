---
- name: Deploy Kubernetes Dashboard using Helm and configure access
  hosts: k3s_control_plane
  become: yes
  gather_facts: yes
  vars:
    dashboard_enabled: true
    dashboard_namespace: kubernetes-dashboard
    dashboard_service_account: dashboard-admin
    remote_kubeconfig: /etc/rancher/k3s/k3s.yaml
    local_kubeconfig: "{{ playbook_dir }}/fetched_tokens/k3s-kubeconfig"
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  tasks:
    - name: Ensure local directory exists for kubeconfig
      file:
        path: "{{ playbook_dir }}/fetched_tokens"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: no

    - name: Ensure scripts directory exists
      file:
        path: "{{ playbook_dir }}/scripts"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: no

    # Fetch kubeconfig from control plane to utility node
    - name: Fetch kubeconfig from k3s control plane
      fetch:
        src: "{{ remote_kubeconfig }}"
        dest: "{{ local_kubeconfig }}"
        flat: yes
      become: yes

    # Update the kubeconfig to use the control plane IP rather than localhost
    - name: Update kubeconfig to use control plane IP
      replace:
        path: "{{ local_kubeconfig }}"
        regexp: 'https://127.0.0.1:6443'
        replace: "https://{{ node_ip }}:6443"
      delegate_to: localhost
      become: no

    # Include the k8s_dashboard role with the proper kubeconfig
    - name: Install Kubernetes Dashboard via Helm
      include_role:
        name: k8s_dashboard
      vars:
        kubeconfig: "{{ local_kubeconfig }}"
      when: dashboard_enabled

    # Create service account and permissions
    - name: Create dashboard admin service account
      kubernetes.core.k8s:
        kubeconfig: "{{ local_kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ dashboard_service_account }}"
            namespace: "{{ dashboard_namespace }}"
      delegate_to: localhost
      become: no

    - name: Create cluster role binding for dashboard admin
      kubernetes.core.k8s:
        kubeconfig: "{{ local_kubeconfig }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "{{ dashboard_service_account }}-binding"
          subjects:
            - kind: ServiceAccount
              name: "{{ dashboard_service_account }}"
              namespace: "{{ dashboard_namespace }}"
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
      delegate_to: localhost
      become: no

    # Create the token secret
    - name: Create long-lived token for dashboard admin
      kubernetes.core.k8s:
        kubeconfig: "{{ local_kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: dashboard-admin-token
            namespace: "{{ dashboard_namespace }}"
            annotations:
              kubernetes.io/service-account.name: "{{ dashboard_service_account }}"
          type: kubernetes.io/service-account-token
      delegate_to: localhost
      become: no

    # Wait for token to be populated
    - name: Wait for token to be generated
      command: >
        kubectl --kubeconfig={{ local_kubeconfig }} -n {{ dashboard_namespace }} get secret dashboard-admin-token -o jsonpath='{.data.token}'
      register: token_check
      until: token_check.stdout != ""
      retries: 10
      delay: 5
      delegate_to: localhost
      become: no

    # Extract token using the local kubeconfig
    - name: Extract dashboard admin token
      shell: >
        kubectl --kubeconfig={{ local_kubeconfig }} -n kubernetes-dashboard get secret dashboard-admin-token -o jsonpath='{.data.token}' | base64 -d
      register: dashboard_token
      delegate_to: localhost
      become: no

    - name: Display dashboard token
      debug:
        msg: 
          - "Kubernetes Dashboard has been deployed via Helm"
          - "You can access the dashboard with this token:"
          - "{{ dashboard_token.stdout }}"

    - name: Create dashboard access script
      copy:
        dest: "{{ playbook_dir }}/scripts/access_dashboard.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          KUBECONFIG="{{ local_kubeconfig }}"
          NAMESPACE="{{ dashboard_namespace }}"
          TOKEN=$(kubectl --kubeconfig=$KUBECONFIG -n $NAMESPACE get secret dashboard-admin-token -o jsonpath="{.data.token}" | base64 -d)
          
          echo "Starting Kubernetes Dashboard using port-forwarding..."
          echo "Token is:"
          echo "$TOKEN"
          echo
          echo "Starting port-forward - press Ctrl+C to exit when done"
          
          # Start port-forwarding in background using the correct service name
          kubectl --kubeconfig=$KUBECONFIG -n $NAMESPACE port-forward svc/kubernetes-dashboard-kong-proxy 8443:443 &
          PF_PID=$!
          
          # Wait 3 seconds for port-forward to establish
          sleep 3
          
          # Open browser
          echo "Opening browser to https://localhost:8443/"
          xdg-open https://localhost:8443/ 2>/dev/null || open https://localhost:8443/ 2>/dev/null || echo "Please open https://localhost:8443/ in your browser"
          
          # Wait for port-forward process to end (when user presses Ctrl+C)
          wait $PF_PID
      delegate_to: localhost
      become: no
